<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on Light OAuth2 - OAuth2 Serivces based on light-4j</title>
    <link>https://networknt.github.io/light-oauth2/tutorials/</link>
    <description>Recent content in Tutorials on Light OAuth2 - OAuth2 Serivces based on light-4j</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Sun, 08 Jan 2017 16:15:49 -0500</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/light-oauth2/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to generate long lived token</title>
      <link>https://networknt.github.io/light-oauth2/tutorials/longlive/</link>
      <pubDate>Sun, 08 Jan 2017 16:15:49 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tutorials/longlive/</guid>
      <description>In normal case, your clients or testing tools should integrate with OAuth authorization server to get tokens during runtime; however, for manual testing, it is very inconvenient to get access token every 10 minutes. To make tester&amp;rsquo;s jobs easier, you can generate a long lived token for dev testing from a tool in Light-Java framework.
The light-oauth2 contains two testing key pairs for testing only. Both private keys and public key certificates can be found in resources/config/oauth folder.</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>https://networknt.github.io/light-oauth2/tutorials/</link>
      <pubDate>Sun, 01 Jan 2017 15:14:28 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tutorials/</guid>
      <description>There are two editions of OAuth2 servers available and each edition has different set of services and endpoints. For Enterprise edition, there are seven services with numeric endpoints. Provider edition is still in planning phase but it will have more features than Enterprise edition.
The following links documented services and endpoints served by each service for two editions and some other useful guides.
How to use enterprise edition
How to user provider edition</description>
    </item>
    
    <item>
      <title>provider</title>
      <link>https://networknt.github.io/light-oauth2/tutorials/provider/</link>
      <pubDate>Sun, 01 Jan 2017 15:14:20 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tutorials/provider/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Enterprise Edition Tutorial</title>
      <link>https://networknt.github.io/light-oauth2/tutorials/enterprise/</link>
      <pubDate>Sun, 01 Jan 2017 15:14:13 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tutorials/enterprise/</guid>
      <description>Note: the following steps use Oracle database as an example. MySQL and Postgres should be the same by choosing docker-compose-mysql.yml or docker-compose-postgres.yml when starting docker-compose.
Start Services In production mode, all services will have docker images downloaded from hub.docker.com or private docker hub within your organization. And Kubernetes or other docker orchestration tools will be used to manage containers.
To help use to understand how each service work and enable user to modify services, the first section of this tutorial will focus on development mode which will build these services and dockerize them.</description>
    </item>
    
  </channel>
</rss>