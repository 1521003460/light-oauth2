<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Light OAuth2 - OAuth2 Serivces based on Light Java</title>
    <link>https://networknt.github.io/light-oauth2/index.xml</link>
    <description>Recent content on Light OAuth2 - OAuth2 Serivces based on Light Java</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 15:14:28 -0500</lastBuildDate>
    <atom:link href="https://networknt.github.io/light-oauth2/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tutorials</title>
      <link>https://networknt.github.io/light-oauth2/tutorials/</link>
      <pubDate>Sun, 01 Jan 2017 15:14:28 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tutorials/</guid>
      <description>&lt;p&gt;There are three editions of OAuth2 servers available and each edition has different set of services and endpoints. For
Development edition, there is only one service to serve both code and token endpoints. And for Enterprise edition, there are six services with numeric endpoints. Provider edition is still in planning phase but it will have more features than Enterprise edition.&lt;/p&gt;

&lt;p&gt;The following links documented services and endpoints served by each service for three editions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;development/&#34;&gt;Development edition&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;enterprise/&#34;&gt;Enterprise edition&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;provider/&#34;&gt;Provider edition&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>provider</title>
      <link>https://networknt.github.io/light-oauth2/tutorials/provider/</link>
      <pubDate>Sun, 01 Jan 2017 15:14:20 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tutorials/provider/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Enterprise Edition Tutorial</title>
      <link>https://networknt.github.io/light-oauth2/tutorials/enterprise/</link>
      <pubDate>Sun, 01 Jan 2017 15:14:13 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tutorials/enterprise/</guid>
      <description>

&lt;p&gt;Note: the following steps use Oracle database as an example. MySQL and Postgres should be the same
by choosing docker-compose-mysql.yml or docker-compose-postgres.yml when starting docker-compose.&lt;/p&gt;

&lt;h1 id=&#34;start-services&#34;&gt;Start Services&lt;/h1&gt;

&lt;p&gt;In production mode, all services will have docker images downloaded from hub.docker.com or private
docker hub within your organization. And Kubernetes or other docker orchestration tools will be
used to manage containers.&lt;/p&gt;

&lt;p&gt;To help use to understand how each service work and enable user to modify services, the first section
of this tutorial will focus on development mode which will build these services and dockerize them.
And start them as a docker compose.&lt;/p&gt;

&lt;p&gt;The following will check out the repo, build and start services with Oracle XE database.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:networknt/light-oauth2.git
cd light-oauth2
git checkout enterprise
mvn clean install -DskipTests
docker-compose -f docker-compose-oracle.yml up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will take about 30 seconds to have all services and database up and running. If Oracle XE image
doesn&amp;rsquo;t exist on your host, it will take longer to download it.&lt;/p&gt;

&lt;p&gt;If you have modified source code, please follow the steps to restart services.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose -f docker-compose-oracle.yml down
mvn clean install
./cleanup.sh
docker-compose -f docker-compose-oracle.yml up
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;test-services&#34;&gt;Test Services&lt;/h1&gt;

&lt;p&gt;By default, the security is partially disabled on these services out of the box so that users
can easily test these services to learn how to use them. In later sections, there are steps to enable
all security with config files.&lt;/p&gt;

&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;

&lt;p&gt;This is part of authorization flow that takes user&amp;rsquo;s credentials and redirect back authorization
code to the webserver.&lt;/p&gt;

&lt;p&gt;There are two endpoints: /oauth2/code@get and /oauth2/code@post&lt;/p&gt;

&lt;p&gt;The GET endpoint uses Basic Authorization and POST endpoint uses Form Authorization.&lt;/p&gt;

&lt;p&gt;In most of the cases, you should use GET endpoint as it provides popup window on
the browser to ask username and password. And there is no need to create a login page
and error page.&lt;/p&gt;

&lt;p&gt;POST endpoint is usually used when you want to have customized login page and error page to make
sure users have the same experience as they browser other part of your web server. Browser will have
a login form to collect user credentials and posts it to the OAuth2 server endpoint. Once the user
is authenticated, a authorization code is redirected back to the browser with a redirect URI passed
in from the request or the default redirect URI for the client will be used from client registration.
As you might guess, this endpoint requires customization most of the time on login page and error page.
Default login page and error page are provided as a starting points to make your customized pages.&lt;/p&gt;

&lt;p&gt;There is only one admin user after the system is installed and the default password
is &amp;ldquo;123456&amp;rdquo;. The password needs to be reset immediately with User Service for
production.&lt;/p&gt;

&lt;p&gt;To get authorization code put the following url into your browser.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:6881/oauth2/code?response_type=code&amp;amp;client_id=f7d42348-c647-4efb-a52d-4c5787421e72&amp;amp;redirect_uri=http://localhost:8080/authorization
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this is the first time you hit this url on the browser, you will have a popup window for user
credentials. Now let&amp;rsquo;s use admin/123456 to login given you haven&amp;rsquo;t reset the password
yet for admin user.&lt;/p&gt;

&lt;p&gt;Once authentication is completed, an authorization code will be redirect to your
browser. Something like the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:8080/authorization?code=pVk10fdsTiiJ1HdUlV4y1g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to call the get endpoint from your command line or script, you can put
the user credentials into the header in above command. Just make sure you have
a server listening to the redirect uri you have specified.&lt;/p&gt;

&lt;p&gt;Here is a sample curl command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -H &amp;quot;Authorization: Basic admin:123456&amp;quot; http://localhost:6881/oauth2/code?response_type=code&amp;amp;client_id=f7d42348-c647-4efb-a52d-4c5787421e72&amp;amp;redirect_uri=http://localhost:8080/authorization
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to try the above command line, you have to make sure that redirect_uri is alive. Otherwise,
you will have an error that doesn&amp;rsquo;t make any sense.&lt;/p&gt;

&lt;h3 id=&#34;token&#34;&gt;Token&lt;/h3&gt;

&lt;p&gt;This service has only one endpoint to get access token. It supports authorization
code grant type and client credentials grant type.&lt;/p&gt;

&lt;p&gt;Authorization Grant with authorization code redirected in the previous step. Please
replace code with the newly retrieved one as it is only valid for 10 minutes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -H &amp;quot;Authorization: Basic f7d42348-c647-4efb-a52d-4c5787421e72:f6h1FTI8Q3-7UScPZDzfXA&amp;quot; -H &amp;quot;Content-Type: application/x-www-form-urlencoded&amp;quot; -X POST -d &amp;quot;grant_type=authorization_code&amp;amp;code=c0iAfPAeTk2BpiPWj-CYPQ&amp;quot; http://localhost:6882/oauth2/token
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above command will have the following output.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;access_token&amp;quot;:&amp;quot;eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTQ4MzIwOTQ4NiwianRpIjoib0dtdXEzSl85d0tlOUVIT2RWM21PUSIsImlhdCI6MTQ4MzIwODg4NiwibmJmIjoxNDgzMjA4NzY2LCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6ImFkbWluIiwidXNlcl90eXBlIjoiYWRtaW4iLCJjbGllbnRfaWQiOiJmN2Q0MjM0OC1jNjQ3LTRlZmItYTUyZC00YzU3ODc0MjFlNzIiLCJzY29wZSI6WyJwZXRzdG9yZS5yIiwicGV0c3RvcmUudyJdfQ.gQ5HI2drObxorsQvz86RYT5tgk7QCnEBm9zNod7SbC--v8s4OfFIM4FQbxGqlMzbU3_dDXiyMSGzOFD_ShZ5se9W2FLxLjbMmBJwQG89peymcdY2mTgQoKJMYxL602a7cloyuoDZ_l-OQSj6RMdgRw4FKmMdOqMKWauoh58faZqvHgGxk43hlKW4bBy4vqg2IhNsUm_vIf-SVAUAMqp0Birt94FfjM3QSCQfwHXfK1nCWjFvfRIoN6w7XrPDQtnZq_8Mhdv8dNwowDLoYayKoUpr7i84gFA11-J1gocJOALj1kYody6kU5CfMwGOSX90PUEmdVy_3WnyEAp3blC-Iw&amp;quot;,&amp;quot;token_type&amp;quot;:&amp;quot;bearer&amp;quot;,&amp;quot;expires_in&amp;quot;:600} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Client Credentials grant doesn&amp;rsquo;t need authorization code but only client_id and
client_secret. Here is the curl command line to get access token.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -H &amp;quot;Authorization: Basic f7d42348-c647-4efb-a52d-4c5787421e72:f6h1FTI8Q3-7UScPZDzfXA&amp;quot; -H &amp;quot;Content-Type: application/x-www-form-urlencoded&amp;quot; -X POST -d &amp;quot;grant_type=client_credentials&amp;quot; http://localhost:6882/oauth2/token
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above command will have the following output.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;access_token&amp;quot;:&amp;quot;eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTQ4MzIwOTc1NywianRpIjoiOVhWdGV2dXZ2cjMwQ0lnZVFuUTFUUSIsImlhdCI6MTQ4MzIwOTE1NywibmJmIjoxNDgzMjA5MDM3LCJ2ZXJzaW9uIjoiMS4wIiwiY2xpZW50X2lkIjoiZjdkNDIzNDgtYzY0Ny00ZWZiLWE1MmQtNGM1Nzg3NDIxZTcyIiwic2NvcGUiOlsicGV0c3RvcmUuciIsInBldHN0b3JlLnciXX0.C8oHgjKpaKWAYJvSqZ4_VT2sw8XXpABFq-aXgNUN2mCEKZJN7AkA6qio0fK4ZCTn5lT9bLou6SOEDV-uXvcU1_XlvKTTnbMO2g-s_7-O-xXxSCAXiLZ-5C7ieGt7enQrxrESUEsgr0Kow4a34GjxAod5j0vcKzhZ6vrcQcuCecPKaeovV0nkBZH2cGPhaLvK346RA9VjxITcR1DgzPWIO3AYJGaIrF8-mCA6Ad8LNi8mB0T5pHIST5fpVTsDYF3KjQJKYiwEhVMbfErBrsmiUUHJ7fYNi5ntLvT-61rupqrQeudl54gg4onct6rT9A2HmuV0iucECkwm9urJ2QxO-A&amp;quot;,&amp;quot;token_type&amp;quot;:&amp;quot;bearer&amp;quot;,&amp;quot;expires_in&amp;quot;:600}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are interested, you can compare the claims of above tokens at &lt;a href=&#34;https://jwt.io/&#34;&gt;https://jwt.io/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;service&#34;&gt;Service&lt;/h3&gt;

&lt;p&gt;OAuth2 is used to protect services and each service must register itself with scope in
order to have fine-grained access control. This microservice provides endpoint to add,
update, remove and query services.&lt;/p&gt;

&lt;p&gt;To add a new service.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -H &amp;quot;Content-Type: application/json&amp;quot; -X POST -d &#39;{&amp;quot;serviceId&amp;quot;:&amp;quot;AACT0003&amp;quot;,&amp;quot;serviceType&amp;quot;:&amp;quot;ms&amp;quot;,&amp;quot;serviceName&amp;quot;:&amp;quot;Retail Account&amp;quot;,&amp;quot;serviceDesc&amp;quot;:&amp;quot;Microservices for Retail Account&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;act.r act.w&amp;quot;,&amp;quot;ownerId&amp;quot;:&amp;quot;admin&amp;quot;}&#39; http://localhost:6883/oauth2/service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To query all services.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:6883/oauth2/service

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[{&amp;quot;serviceType&amp;quot;:&amp;quot;ms&amp;quot;,&amp;quot;serviceDesc&amp;quot;:&amp;quot;A microservice that serves account information&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;a.r b.r&amp;quot;,&amp;quot;serviceId&amp;quot;:&amp;quot;AACT0001&amp;quot;,&amp;quot;serviceName&amp;quot;:&amp;quot;Account Service&amp;quot;,&amp;quot;ownerId&amp;quot;:&amp;quot;admin&amp;quot;,&amp;quot;updateDt&amp;quot;:null,&amp;quot;createDt&amp;quot;:&amp;quot;2016-12-31&amp;quot;},{&amp;quot;serviceType&amp;quot;:&amp;quot;ms&amp;quot;,&amp;quot;serviceDesc&amp;quot;:&amp;quot;Microservices for Retail Account&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;act.r act.w&amp;quot;,&amp;quot;serviceId&amp;quot;:&amp;quot;AACT0003&amp;quot;,&amp;quot;serviceName&amp;quot;:&amp;quot;Retail Account&amp;quot;,&amp;quot;ownerId&amp;quot;:&amp;quot;admin&amp;quot;,&amp;quot;updateDt&amp;quot;:null,&amp;quot;createDt&amp;quot;:&amp;quot;2016-12-31&amp;quot;}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To query a service with service id.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:6883/oauth2/service/AACT0003

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;serviceType&amp;quot;:&amp;quot;ms&amp;quot;,&amp;quot;serviceDesc&amp;quot;:&amp;quot;Microservices for Retail Account&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;act.r act.w&amp;quot;,&amp;quot;serviceId&amp;quot;:&amp;quot;AACT0003&amp;quot;,&amp;quot;serviceName&amp;quot;:&amp;quot;Retail Account&amp;quot;,&amp;quot;ownerId&amp;quot;:&amp;quot;admin&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To update above service type to &amp;ldquo;api&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -H &amp;quot;Content-Type: application/json&amp;quot; -X PUT -d &#39;{&amp;quot;serviceType&amp;quot;:&amp;quot;api&amp;quot;,&amp;quot;serviceDesc&amp;quot;:&amp;quot;Microservices for Retail Account&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;act.r act.w&amp;quot;,&amp;quot;serviceId&amp;quot;:&amp;quot;AACT0003&amp;quot;,&amp;quot;serviceName&amp;quot;:&amp;quot;Retail Account&amp;quot;,&amp;quot;ownerId&amp;quot;:&amp;quot;admin&amp;quot;}&#39; http://localhost:6883/oauth2/service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To delete above service with service id.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -X DELETE http://localhost:6883/oauth2/service/AACT0003

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;client&#34;&gt;Client&lt;/h3&gt;

&lt;p&gt;Every client that accesses service(s) must register itself in order to get
access token during runtime. An entity might be a client and service at the
same time and in this case, it must register twice as client and service.&lt;/p&gt;

&lt;p&gt;To add a new client.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -H &amp;quot;Content-Type: application/json&amp;quot; -X POST -d &#39;{&amp;quot;clientType&amp;quot;:&amp;quot;public&amp;quot;,&amp;quot;clientProfile&amp;quot;:&amp;quot;mobile&amp;quot;,&amp;quot;clientName&amp;quot;:&amp;quot;AccountViewer&amp;quot;,&amp;quot;clientDesc&amp;quot;:&amp;quot;Retail Online Banking Account Viewer&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;act.r act.w&amp;quot;,&amp;quot;redirectUri&amp;quot;: &amp;quot;http://localhost:8080/authorization&amp;quot;,&amp;quot;ownerId&amp;quot;:&amp;quot;admin&amp;quot;}&#39; http://localhost:6884/oauth2/client
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the result with client_id and client_secret.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;clientDesc&amp;quot;:&amp;quot;Retail Online Banking Account Viewer&amp;quot;,&amp;quot;clientType&amp;quot;:&amp;quot;public&amp;quot;,&amp;quot;clientProfile&amp;quot;:&amp;quot;mobile&amp;quot;,&amp;quot;redirectUri&amp;quot;:&amp;quot;http://localhost:8080/authorization&amp;quot;,&amp;quot;clientId&amp;quot;:&amp;quot;e24e7110-c39f-49f1-85eb-8434cb577482&amp;quot;,&amp;quot;clientName&amp;quot;:&amp;quot;AccountViewer&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;act.r act.w&amp;quot;,&amp;quot;clientSecret&amp;quot;:&amp;quot;YDJLse8SQRapHyoMsdPUig&amp;quot;,&amp;quot;ownerId&amp;quot;:&amp;quot;admin&amp;quot;,&amp;quot;createDt&amp;quot;:&amp;quot;2016-12-31&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To query all clients.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:6884/oauth2/client

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[{&amp;quot;clientDesc&amp;quot;:&amp;quot;PetStore Web Server that calls PetStore API&amp;quot;,&amp;quot;clientId&amp;quot;:&amp;quot;f7d42348-c647-4efb-a52d-4c5787421e72&amp;quot;,&amp;quot;clientType&amp;quot;:&amp;quot;public&amp;quot;,&amp;quot;clientProfile&amp;quot;:&amp;quot;mobile&amp;quot;,&amp;quot;redirectUri&amp;quot;:&amp;quot;http://localhost:8080/authorization&amp;quot;,&amp;quot;clientName&amp;quot;:&amp;quot;PetStore Web Server&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;petstore.r petstore.w&amp;quot;,&amp;quot;ownerId&amp;quot;:&amp;quot;admin&amp;quot;,&amp;quot;updateDt&amp;quot;:null,&amp;quot;createDt&amp;quot;:&amp;quot;2016-12-31&amp;quot;,&amp;quot;authenticateClass&amp;quot;:null},{&amp;quot;clientDesc&amp;quot;:&amp;quot;Retail Online Banking Account Viewer&amp;quot;,&amp;quot;clientId&amp;quot;:&amp;quot;9ef89c7b-f17b-4a64-a24b-ce539ed80641&amp;quot;,&amp;quot;clientType&amp;quot;:&amp;quot;public&amp;quot;,&amp;quot;clientProfile&amp;quot;:&amp;quot;mobile&amp;quot;,&amp;quot;redirectUri&amp;quot;:&amp;quot;http://localhost:8080/authorization&amp;quot;,&amp;quot;clientName&amp;quot;:&amp;quot;AccountViewer&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;act.r act.w&amp;quot;,&amp;quot;ownerId&amp;quot;:&amp;quot;admin&amp;quot;,&amp;quot;updateDt&amp;quot;:null,&amp;quot;createDt&amp;quot;:&amp;quot;2016-12-31&amp;quot;,&amp;quot;authenticateClass&amp;quot;:null}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To query a client by id.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:6884/oauth2/client/f7d42348-c647-4efb-a52d-4c5787421e72
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;clientDesc&amp;quot;:&amp;quot;PetStore Web Server that calls PetStore API&amp;quot;,&amp;quot;clientId&amp;quot;:&amp;quot;f7d42348-c647-4efb-a52d-4c5787421e72&amp;quot;,&amp;quot;clientType&amp;quot;:&amp;quot;public&amp;quot;,&amp;quot;clientProfile&amp;quot;:&amp;quot;mobile&amp;quot;,&amp;quot;redirectUri&amp;quot;:&amp;quot;http://localhost:8080/authorization&amp;quot;,&amp;quot;clientName&amp;quot;:&amp;quot;PetStore Web Server&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;petstore.r petstore.w&amp;quot;,&amp;quot;clientSecret&amp;quot;:&amp;quot;f6h1FTI8Q3-7UScPZDzfXA&amp;quot;,&amp;quot;ownerId&amp;quot;:&amp;quot;admin&amp;quot;,&amp;quot;updateDt&amp;quot;:null,&amp;quot;createDt&amp;quot;:&amp;quot;2016-12-31&amp;quot;,&amp;quot;authenticateClass&amp;quot;:null}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To update a client with a shorter clientDesc.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -H &amp;quot;Content-Type: application/json&amp;quot; -X PUT -d &#39;{&amp;quot;clientDesc&amp;quot;:&amp;quot;PetStore Web Server&amp;quot;,&amp;quot;clientId&amp;quot;:&amp;quot;f7d42348-c647-4efb-a52d-4c5787421e72&amp;quot;,&amp;quot;clientType&amp;quot;:&amp;quot;public&amp;quot;,&amp;quot;clientProfile&amp;quot;:&amp;quot;mobile&amp;quot;,&amp;quot;redirectUri&amp;quot;:&amp;quot;http://localhost:8080/authorization&amp;quot;,&amp;quot;clientName&amp;quot;:&amp;quot;PetStore Web Server&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;petstore.r petstore.w&amp;quot;,&amp;quot;clientSecret&amp;quot;:&amp;quot;f6h1FTI8Q3-7UScPZDzfXA&amp;quot;,&amp;quot;ownerId&amp;quot;:&amp;quot;admin&amp;quot;,&amp;quot;updateDt&amp;quot;:null,&amp;quot;createDt&amp;quot;:&amp;quot;2016-12-31&amp;quot;,&amp;quot;authenticateClass&amp;quot;:null}&#39; http://localhost:6884/oauth2/client
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To delete a client with client id.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -X DELETE http://localhost:6884/oauth2/client/9ef89c7b-f17b-4a64-a24b-ce539ed80641

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;user&#34;&gt;User&lt;/h3&gt;

&lt;p&gt;The OAuth2 services can be integrated with existing Active Directory, LDAP or customer
database for authentication. If there is no existing authentication service, you can
register users into database.&lt;/p&gt;

&lt;p&gt;To add a new user.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -H &amp;quot;Content-Type: application/json&amp;quot; -X POST -d &#39;{&amp;quot;userId&amp;quot;:&amp;quot;stevehu&amp;quot;,&amp;quot;userType&amp;quot;:&amp;quot;employee&amp;quot;,&amp;quot;firstName&amp;quot;:&amp;quot;Steve&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Hu&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;stevehu@gmail.com&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;123456&amp;quot;,&amp;quot;passwordConfirm&amp;quot;:&amp;quot;123456&amp;quot;}&#39; http://localhost:6885/oauth2/user
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To query a user.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:6885/oauth2/user/stevehu

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;firstName&amp;quot;:&amp;quot;Steve&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Hu&amp;quot;,&amp;quot;userType&amp;quot;:&amp;quot;employee&amp;quot;,&amp;quot;userId&amp;quot;:&amp;quot;stevehu&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;stevehu@gmail.com&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To update the user type to partner.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -H &amp;quot;Content-Type: application/json&amp;quot; -X PUT -d &#39;{&amp;quot;firstName&amp;quot;:&amp;quot;Steve&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Hu&amp;quot;,&amp;quot;userType&amp;quot;:&amp;quot;partner&amp;quot;,&amp;quot;userId&amp;quot;:&amp;quot;stevehu&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;stevehu@gmail.com&amp;quot;}&#39; http://localhost:6885/oauth2/user
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To reset the password.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -H &amp;quot;Content-Type: application/json&amp;quot; -X POST -d &#39;{&amp;quot;password&amp;quot;:&amp;quot;123456&amp;quot;,&amp;quot;newPassword&amp;quot;:&amp;quot;stevehu&amp;quot;,&amp;quot;newPasswordConfirm&amp;quot;:&amp;quot;stevehu&amp;quot;}&#39; http://localhost:6885/oauth2/password/stevehu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To remove a user.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -X DELETE http://localhost:6885/oauth2/user/stevehu

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;key&#34;&gt;Key&lt;/h3&gt;

&lt;p&gt;Light-Java and Light-OAuth2 support distributed security verification and this
requires the JWT public key certificate to be distributed to all services. By
default, all services built on top of Light-Java will include a set of
certificates. But how to distributed new certificates to thousands of running
services if certificates are renewed? There is no way we can copy certificates
to all the running containers as they are dynamic and new containers can be
started anytime by container orchestration tool.&lt;/p&gt;

&lt;p&gt;The traditional push approach is not working and a new way of pull certificates
from OAuth2 key service is implemented in Light-Java and Light-OAuth2.&lt;/p&gt;

&lt;p&gt;This feature is tightly integrated with Light-Java and it should work seamlessly.&lt;/p&gt;

&lt;p&gt;The first step to get certificate is to encode client_id:client_secret pair for
basic authentication.&lt;/p&gt;

&lt;p&gt;Here is the client_id:client_secret&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;f7d42348-c647-4efb-a52d-4c5787421e72:f6h1FTI8Q3-7UScPZDzfXA
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://www.base64encode.org/&#34;&gt;https://www.base64encode.org/&lt;/a&gt; to encode it to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ZjdkNDIzNDgtYzY0Ny00ZWZiLWE1MmQtNGM1Nzg3NDIxZTcyOmY2aDFGVEk4UTMtN1VTY1BaRHpmWEE=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get certificate by a key id.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -H &amp;quot;Authorization: Basic ZjdkNDIzNDgtYzY0Ny00ZWZiLWE1MmQtNGM1Nzg3NDIxZTcyOmY2aDFGVEk4UTMtN1VTY1BaRHpmWEE=&amp;quot; http://localhost:6886/oauth2/key/101
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-----BEGIN CERTIFICATE-----
MIIDkzCCAnugAwIBAgIEUBGbJDANBgkqhkiG9w0BAQsFADB6MQswCQYDVQQGEwJDQTEQMA4GA1UE
CBMHT250YXJpbzEQMA4GA1UEBxMHVG9yb250bzEmMCQGA1UEChMdTmV0d29yayBOZXcgVGVjaG5v
bG9naWVzIEluYy4xDDAKBgNVBAsTA0FQSTERMA8GA1UEAxMIU3RldmUgSHUwHhcNMTYwOTIyMjI1
OTIxWhcNMjYwODAxMjI1OTIxWjB6MQswCQYDVQQGEwJDQTEQMA4GA1UECBMHT250YXJpbzEQMA4G
A1UEBxMHVG9yb250bzEmMCQGA1UEChMdTmV0d29yayBOZXcgVGVjaG5vbG9naWVzIEluYy4xDDAK
BgNVBAsTA0FQSTERMA8GA1UEAxMIU3RldmUgSHUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
AoIBAQCqYfarFwug2DwpG/mmcW77OluaHVNsKEVJ/BptLp5suJAH/Z70SS5pwM4x2QwMOVO2ke8U
rsAws8allxcuKXrbpVt4evpO1Ly2sFwqB1bjN3+VMp6wcT+tSjzYdVGFpQAYHpeA+OLuoHtQyfpB
0KCveTEe3KAG33zXDNfGKTGmupZ3ZfmBLINoey/X13rY71ITt67AY78VHUKb+D53MBahCcjJ9YpJ
UHG+Sd3d4oeXiQcqJCBCVpD97awWARf8WYRIgU1xfCe06wQ3CzH3+GyfozLeu76Ni5PwE1tm7Dhg
EDSSZo5khmzVzo4G0T2sOeshePc5weZBNRHdHlJA0L0fAgMBAAGjITAfMB0GA1UdDgQWBBT9rnek
spnrFus5wTszjdzYgKll9TANBgkqhkiG9w0BAQsFAAOCAQEAT8udTfUGBgeWbN6ZAXRI64VsSJj5
1sNUN1GPDADLxZF6jArKU7LjBNXn9bG5VjJqlx8hQ1SNvi/t7FqBRCUt/3MxDmGZrVZqLY1kZ2e7
x+5RykbspA8neEUtU8sOr/NP3O5jBjU77EVec9hNNT5zwKLevZNL/Q5mfHoc4GrIAolQvi/5fEqC
8OMdOIWS6sERgjaeI4tXxQtHDcMo5PeLW0/7t5sgEsadZ+pkdeEMVTmLfgf97bpNNI7KF5uEbYnQ
NpwCT+NNC5ACmJmKidrfW23kml1C7vr7YzTevw9QuH/hN8l/Rh0fr+iPEVpgN6Zv00ymoKGmjuuW
owVmdKg/0w==
-----END CERTIFICATE-----
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>development</title>
      <link>https://networknt.github.io/light-oauth2/tutorials/development/</link>
      <pubDate>Sun, 01 Jan 2017 15:14:05 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tutorials/development/</guid>
      <description></description>
    </item>
    
    <item>
      <title>OAuth2 Introduction</title>
      <link>https://networknt.github.io/light-oauth2/getting-started/introduction/</link>
      <pubDate>Sun, 01 Jan 2017 10:12:55 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/getting-started/introduction/</guid>
      <description>

&lt;p&gt;OAuth 2 is an authorization framework that enables applications to obtain limited access
to user&amp;rsquo;s resources on an HTTP service - normally exposed as a REST API. It works by
delegating user authentication to an authorization service which contains all sorts of login
service providers like LDAP for employees and database for customers.&lt;/p&gt;

&lt;p&gt;OAuth 2 provides authorization flows for the following types of application to application
communication:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web server to API&lt;/li&gt;
&lt;li&gt;Standalone application to API&lt;/li&gt;
&lt;li&gt;API to API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This informational guide is geared towards application developers, and provides an
overview of OAuth 2 roles, authorization grant types, use cases, and flows.&lt;/p&gt;

&lt;h1 id=&#34;oauth-roles&#34;&gt;OAuth Roles&lt;/h1&gt;

&lt;p&gt;OAuth defines four roles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resource Owner&lt;/li&gt;
&lt;li&gt;Client&lt;/li&gt;
&lt;li&gt;Resource Server&lt;/li&gt;
&lt;li&gt;Authorization Server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will detail each role in the following subsections.&lt;/p&gt;

&lt;h2 id=&#34;resource-owner-user&#34;&gt;Resource Owner: User&lt;/h2&gt;

&lt;p&gt;The resource owner is the user who authorizes an application to access their resources.
The application&amp;rsquo;s access to the user&amp;rsquo;s resource is limited to the &amp;ldquo;scope&amp;rdquo; of the
authorization granted (e.g. read or write access).&lt;/p&gt;

&lt;h2 id=&#34;resource-server-api&#34;&gt;Resource Server: API&lt;/h2&gt;

&lt;p&gt;The resource server hosts the protected user resources.&lt;/p&gt;

&lt;h2 id=&#34;authorization-server-api&#34;&gt;Authorization Server: API&lt;/h2&gt;

&lt;p&gt;the authorization server verifies the identity of the user then issues access tokens to
the application.&lt;/p&gt;

&lt;h2 id=&#34;client-application&#34;&gt;Client: Application&lt;/h2&gt;

&lt;p&gt;The client is the application that wants to access the user&amp;rsquo;s resources. Before it may
do so, it must be authorized by the user, and the authorization must be validated by
the API.&lt;/p&gt;

&lt;h1 id=&#34;abstract-protocol-flow&#34;&gt;Abstract Protocol Flow&lt;/h1&gt;

&lt;p&gt;Now that you have an idea of what the OAuth roles are, let&amp;rsquo;s look at a diagram of how
they generally interact with each other:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.digitalocean.com/articles/oauth/abstract_flow.png&#34; alt=&#34;Abstract Flow&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here is a more detailed explanation of the steps in the diagram:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The application requests authorization to access service resources from the user&lt;/li&gt;
&lt;li&gt;If the user authorized the request, the application receives an authorization grant&lt;/li&gt;
&lt;li&gt;The application requests an access token from the authorization server (API) by
presenting authentication of its own identity, and the authorization grant&lt;/li&gt;
&lt;li&gt;If the application identity is authenticated and the authorization grant is valid,
the authorization server issues an access token to the application.&lt;/li&gt;
&lt;li&gt;The application requests the resource from the resource server (API) and presents the access
token for authentication.&lt;/li&gt;
&lt;li&gt;If the access token is valid, the resource server (API) serves the resource to the application.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The actual flow of this process will differ depending on the authorization grant type in use,
but this is the general idea. We will explore different grant types in a later section.&lt;/p&gt;

&lt;h1 id=&#34;application-registration&#34;&gt;Application Registration&lt;/h1&gt;

&lt;p&gt;Before using OAuth with your application, you must register your application with
the service. This is done through a registration form in the &amp;ldquo;developer&amp;rdquo; or &amp;ldquo;API&amp;rdquo;
portion of the service&amp;rsquo;s website, where you will provide the following information
(and probably details about your application):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application Name&lt;/li&gt;
&lt;li&gt;Application Website&lt;/li&gt;
&lt;li&gt;Redirect URI or Callback URL&lt;/li&gt;
&lt;li&gt;The redirect URI is where the service will redirect the user after they authorize (or deny) your application, and therefore the part of your application that will handle authorization codes or access tokens.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;client-id-and-client-secret&#34;&gt;Client ID and Client Secret&lt;/h1&gt;

&lt;p&gt;Once your application is registered, the service will issue &amp;ldquo;client credentials&amp;rdquo; in
the form of a client identifier and a client secret. The Client ID is a publicly
exposed string that is used by the service API to identify the application, and is
also used to build authorization URLs that are presented to users. The Client Secret
is used to authenticate the identity of the application to the service API when the
application requests to access a user&amp;rsquo;s resource, and must be kept private between
the application and the API.&lt;/p&gt;

&lt;h1 id=&#34;authorization-grant&#34;&gt;Authorization Grant&lt;/h1&gt;

&lt;p&gt;In the Abstract Protocol Flow above, the first four steps cover obtaining an
authorization grant and access token. The authorization grant type depends on the
method used by the application to request authorization, and the grant types
supported by the Authorization server. OAuth 2 defines four grant types, each of which is useful in
different cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authorization Code: used with server-side Applications&lt;/li&gt;
&lt;li&gt;Implicit: used with Mobile Apps or Web Applications (applications that run on the user&amp;rsquo;s device)&lt;/li&gt;
&lt;li&gt;Resource Owner Password Credentials: used with trusted Applications, such as those owned by the service itself&lt;/li&gt;
&lt;li&gt;Client Credentials: used with Applications API access&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we will describe grant types in more detail, their use cases and flows, in the following sections.&lt;/p&gt;

&lt;h1 id=&#34;grant-type-authorization-code&#34;&gt;Grant Type: Authorization Code&lt;/h1&gt;

&lt;p&gt;The authorization code grant type is the most commonly used because it is optimized
for server-side applications, where source code is not publicly exposed, and Client
Secret confidentiality can be maintained. This is a redirection-based flow, which
means that the application must be capable of interacting with the user-agent
(i.e. the user&amp;rsquo;s web browser) and receiving API authorization codes that are routed
through the user-agent.&lt;/p&gt;

&lt;p&gt;Now we will describe the authorization code flow:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.digitalocean.com/articles/oauth/auth_code_flow.png&#34; alt=&#34;Auth Code Flow&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Step 1: Authorization Code Link&lt;/p&gt;

&lt;p&gt;First, the user is given an authorization code link that looks like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:8888/oauth2/code?response_type=code&amp;amp;client_id=6e9d1db3-2feb-4c1f-a5ad-9e93ae8ca59d&amp;amp;redirect_uri=http://localhost:8080/authorization
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an explanation of the link components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:8888/oauth2/code:&#34;&gt;http://localhost:8888/oauth2/code:&lt;/a&gt; the authorization endpoint&lt;/li&gt;
&lt;li&gt;client_id=6e9d1db3-2feb-4c1f-a5ad-9e93ae8ca59d: the application&amp;rsquo;s client_id (how the API identifies
the application)&lt;/li&gt;
&lt;li&gt;redirect_uri=&lt;a href=&#34;http://localhost:8080/authorization:&#34;&gt;http://localhost:8080/authorization:&lt;/a&gt; where the service redirects the user-agent after
an authorization code is granted&lt;/li&gt;
&lt;li&gt;response_type=code: specifies that your application is requesting an authorization code grant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 2: User Authorizes Application&lt;/p&gt;

&lt;p&gt;When the user clicks the link, they must first log in to the authorization service, to authenticate
their identity (unless they are already logged in).&lt;/p&gt;

&lt;p&gt;Step 3: Application Receives Authorization Code&lt;/p&gt;

&lt;p&gt;If the user is authenticated, the service redirects the user-agent to
the application redirect URI, which was specified during the client registration,
along with an authorization code. The redirect would look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:8080/authorization?code=rlbQn-mUT4ep-GLyRHaFsg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 4: Application Requests Access Token&lt;/p&gt;

&lt;p&gt;The application requests an access token from the API, by passing the authorization
code along with authentication details, including the client secret, to the API
token endpoint. Here is an example POST request to token endpoint:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Url:
http://localhost:8888/oauth2/token

Header:
Authorization Basic 6e9d1db3-2feb-4c1f-a5ad-9e93ae8ca59d:sQesTWAnTwaw-Nn0oK35GA

Body in x-www-form-urlencoded
grant_type=authorization_code
code=rlbQn-mUT4ep-GLyRHaFsg

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 5: Application Receives Access Token&lt;/p&gt;

&lt;p&gt;If the authorization is valid, the Authorization server will send a response containing the
access token (and optionally, a refresh token) to the application. The entire response
will look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;access_token&amp;quot;: &amp;quot;eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTQ3NDU3MDc3NiwianRpIjoiaXNRLWFMWGhFR21kcDZ1MVFNQWNsdyIsImlhdCI6MTQ3NDU3MDE3NiwibmJmIjoxNDc0NTcwMDU2LCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6InN0ZXZlaHUiLCJ1c2VyX3R5cGUiOiJFTVBMT1lFRSIsImNsaWVudF9pZCI6IjZlOWQxZGIzLTJmZWItNGMxZi1hNWFkLTllOTNhZThjYTU5ZCIsInNjb3BlIjpbImFjY291bnQuciIsImFjY291bnQudyJdfQ.W8tUY-jsrwH5Z_4WkKRPGhO3H-GGFXMa3a_ng3CIzEkKdRcQpG_7x3T8e7qsMmMvo69zus4lo96k3Qb3nN29aMeYH7g1AoXAawNWLpahNQ9U1EIf_cHDY23qGCU0GudAyITBVqJJVei2LmlZTSnvPYbn2TpXjAC3tODNlWVLSmfn7rXDSEosllDyvrJrWOUV8-VOpBTgzjTLB8axwzoIZjmV6QoOHC9R4g27AbEDXNDNSPl4aEFh5rShkeF7Gd0h9XuA_PTY5WcFbhSZw7aXk1-tJQnLGMgznZwegcGjD_u7s9cWvuojjXTS-V7XUIokk88hIDprfKCmwlAO2yoeFA&amp;quot;,
  &amp;quot;token_type&amp;quot;: &amp;quot;bearer&amp;quot;,
  &amp;quot;expires_in&amp;quot;: 600
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the application is authorized! It may use the token to access the user&amp;rsquo;s resource
via the service API, limited to the scope of access, until the token expires. If a
refresh token was issued, it may be used to request new access tokens if the original
token has expired.&lt;/p&gt;

&lt;h1 id=&#34;grant-type-client-credentials&#34;&gt;Grant Type: Client Credentials&lt;/h1&gt;

&lt;p&gt;The client credentials grant type provides an application a way to access its own
service by passing client credentials through the header and specify grant_type in body
to &amp;ldquo;client_credentials&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The application requests an access token by sending its credentials, its client_id
and client_secret to the authorization server. An example POST request might look
like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Url:
http://localhost:8888/oauth2/token

Header:
Authorization Basic 6e9d1db3-2feb-4c1f-a5ad-9e93ae8ca59d:sQesTWAnTwaw-Nn0oK35GA

Body in x-www-form-urlencoded
grant_type=client_credentials

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the client credentials is correct, the authorization server returns an access token
to the application. Now the application is authorized to use its own resource!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;access_token&amp;quot;: &amp;quot;eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTQ3NDU3MDk3MywianRpIjoicVNxbnozaTJ3NWE4SVh4YURNNnBKUSIsImlhdCI6MTQ3NDU3MDM3MywibmJmIjoxNDc0NTcwMjUzLCJ2ZXJzaW9uIjoiMS4wIiwiY2xpZW50X2lkIjoiNmU5ZDFkYjMtMmZlYi00YzFmLWE1YWQtOWU5M2FlOGNhNTlkIiwic2NvcGUiOlsiYWNjb3VudC5yIiwiYWNjb3VudC53Il19.Dl6pMiQ6NQf4DKSA2Hz2qlrIAvJDnTfXPsvCa2EUq3QOASXN_tPsttW2BB33rIsa9UE1meP-ipI6mubtM18LyUex50OoegQVZsde4vTRd0oldTxWV8euqmCGZcrauvw_E4-CG00lDbuXYXX2_CpZO6GLlkXeG07IMEAjBVG__sXvybmMTKx32dT1OtrI32ePJZe9Nazt-TMCIqAVa_E6zeEAiatX6mgDXM62xX_AKLnXQ04TpeTD4TXkV-JUQ6ZMtdfCIgAR0tMB6fKLDfHiOb2vMEz3q1COVIsS3ce7rRjaQKEYq6Zrao91ft1Y0fYbRL-jRhXRfVPbUUdxxhbjrg&amp;quot;,
  &amp;quot;token_type&amp;quot;: &amp;quot;bearer&amp;quot;,
  &amp;quot;expires_in&amp;quot;: 600
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;example-access-token-usage&#34;&gt;Example Access Token Usage&lt;/h1&gt;

&lt;p&gt;Once the application has an access token, it may use the token to access the user&amp;rsquo;s
resource via the API, limited to the scope of access, until the token expires.&lt;/p&gt;

&lt;p&gt;Here is an example of an API request, using curl. Note that it includes the access
token:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -X POST -H &amp;quot;Authorization: Bearer ACCESS_TOKEN&amp;quot; &amp;quot;http://localhost:8080/customer/111&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming the access token is valid, the API will process the request according to its
API specifications. If the access token is expired or otherwise invalid, the API will
return an 401 error.&lt;/p&gt;

&lt;h1 id=&#34;refresh-token-flow&#34;&gt;Refresh Token Flow&lt;/h1&gt;

&lt;p&gt;After an access token expires, using it to make a request from the API will result in
an &amp;ldquo;Invalid Token Error&amp;rdquo;. At this point, if a refresh token was included when the
original access token was issued, it can be used to request a fresh access token from
the authorization server.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;You should now have a good idea of how OAuth 2 works, and when a particular authorization
flow should be used.&lt;/p&gt;

&lt;p&gt;If you want to learn more about OAuth 2, check out these valuable resources:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc6749&#34;&gt;OAuth2 RFC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34;&gt;JWT RFC&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Services</title>
      <link>https://networknt.github.io/light-oauth2/services/</link>
      <pubDate>Sun, 01 Jan 2017 09:37:52 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/</guid>
      <description>&lt;p&gt;There are three editions of OAuth2 servers available and each edition has different set of services and endpoints. For
Development edition, there is only one service to serve both code and token endpoints. And for Enterprise edition, there are six services with numeric endpoints. Provider edition is still in planning phase but it will have more features than Enterprise edition.&lt;/p&gt;

&lt;p&gt;The following links documented services and endpoints served by each service for three editions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;development/&#34;&gt;Development edition&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;enterprise/&#34;&gt;Enterprise edition&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;provider/&#34;&gt;Provider edition&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Provider Edition</title>
      <link>https://networknt.github.io/light-oauth2/services/provider/</link>
      <pubDate>Sun, 01 Jan 2017 09:37:43 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/provider/</guid>
      <description>&lt;p&gt;To be implemented.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enterprise Edition</title>
      <link>https://networknt.github.io/light-oauth2/services/enterprise/</link>
      <pubDate>Sun, 01 Jan 2017 09:37:32 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/enterprise/</guid>
      <description>

&lt;p&gt;There are six standard services that cover standard OAuth2 grant flows and extended features like
service on-boarding, client on-boarding, user management and public key certificate distribution.&lt;/p&gt;

&lt;p&gt;This document only describe the features and processes of each service. Please refer to &lt;a href=&#34;https://networknt.github.io/light-oauth2/tutorial/enterprise/&#34;&gt;tutorial&lt;/a&gt;
on how to access these services.&lt;/p&gt;

&lt;h1 id=&#34;code&#34;&gt;Code&lt;/h1&gt;

&lt;p&gt;This is a service that support authorization code grant type. The authorization
code grant type is used to obtain both access tokens and refresh tokens and is
optimized for confidential clients. Since this is a redirection-based flow, the
client must be capable of interacting with the resource owner&amp;rsquo;s user-agent
(typically a web browser) and capable of receiving incoming requests (via
redirection) from the authorization server.&lt;/p&gt;

&lt;p&gt;The service accepts user credentials and redirects back authorization code with
redirect URI defined in the client registration or overwritten it by passing in
a redirect URI in the request.&lt;/p&gt;

&lt;h2 id=&#34;request&#34;&gt;Request&lt;/h2&gt;

&lt;p&gt;The client constructs the request URI by adding the following parameters to the
query component of the authorization endpoint URI using the
&amp;ldquo;application/x-www-form-urlencoded&amp;rdquo; format.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;response_type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REQUIRED. Value MUST be set to &amp;ldquo;code&amp;rdquo;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;client_id&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REQUIRED. The client identifier.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;redirect_uri
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OPTIONAL. Redirect URI.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;scope&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OPTIONAL. The scope of the access request.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;state
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RECOMMENDED. An opaque value used by the client to maintain state between the
request and callback. The authorization server includes this value when redirecting
the user-agent back to the client. The parameter SHOULD be used for preventing
cross-site request forgery.&lt;/p&gt;

&lt;h2 id=&#34;response&#34;&gt;Response&lt;/h2&gt;

&lt;p&gt;If the resource owner grants the access request, the authorization server issues
an authorization code and delivers it to the client by adding the following
parameters to the query component of the redirection URI using the
&amp;ldquo;application/x-www-form-urlencoded&amp;rdquo; format.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;code
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REQUIRED. The authorization code generated by the authorization server.  The
authorization code MUST expire shortly after it is issued to mitigate the risk
of leaks. A maximum authorization code lifetime of 10 minutes is RECOMMENDED.&lt;br /&gt;
The client MUST NOT use the authorization code more than once. If an
authorization code is used more than once, the authorization server MUST deny
the request and SHOULD revoke (when possible) all tokens previously issued based
on that authorization code. The authorization code is bound to the client
identifier and redirection URI.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;state
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REQUIRED if the &amp;ldquo;state&amp;rdquo; parameter was present in the client authorization
request. The exact value received from the client.&lt;/p&gt;

&lt;h2 id=&#34;service&#34;&gt;Service&lt;/h2&gt;

&lt;p&gt;There are two endpoints and the service default listening port is 6881.&lt;/p&gt;

&lt;p&gt;Here is the specification:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger: &#39;2.0&#39;

info:
  version: &amp;quot;1.0.0&amp;quot;
  title: OAuth2 Service Authorization Code
  description: OAuth2 Service that logs in user and provide authorization code. 
  contact:
    email: stevehu@gmail.com
  license:
    name: &amp;quot;Apache 2.0&amp;quot;
    url: &amp;quot;http://www.apache.org/licenses/LICENSE-2.0.html&amp;quot;
host: oauth2.networknt.com
schemes:
  - http
  - https

consumes:
  - application/json
produces:
  - application/json

paths:
  /oauth2/code:
    get:
      description: Return 302 redirect with authorization code
      operationId: getAuthCode
      parameters:
      - name: &amp;quot;Authorization&amp;quot;
        description: &amp;quot;encoded username:password mandatory if Basic Authentication is used&amp;quot;
        in: &amp;quot;header&amp;quot;
        required: false
        type: &amp;quot;string&amp;quot;
      - name: &amp;quot;response_type&amp;quot;
        in: &amp;quot;query&amp;quot;
        description: &amp;quot;The response type for authorization code&amp;quot;
        required: true
        type: &amp;quot;string&amp;quot;
        enum:
        - &amp;quot;code&amp;quot;
      - name: &amp;quot;client_id&amp;quot;
        in: &amp;quot;query&amp;quot;
        description: &amp;quot;The client id for authorization code&amp;quot;
        required: true
        type: &amp;quot;string&amp;quot;
      - name: &amp;quot;redirect_uri&amp;quot;
        in: &amp;quot;query&amp;quot;
        description: &amp;quot;The redirect uri for authorization code&amp;quot;
        required: false
        type: &amp;quot;string&amp;quot;
      - name: &amp;quot;username&amp;quot;
        in: &amp;quot;query&amp;quot;
        description: &amp;quot;The user name for authorization code&amp;quot;
        required: false
        type: &amp;quot;string&amp;quot;
      - name: &amp;quot;password&amp;quot;
        in: &amp;quot;query&amp;quot;
        description: &amp;quot;The password for authorization code in clear text&amp;quot;
        required: false
        type: &amp;quot;string&amp;quot;
      - name: &amp;quot;state&amp;quot;
        in: &amp;quot;query&amp;quot;
        description: &amp;quot;to prevent cross-site request forgery&amp;quot;
        required: false
        type: &amp;quot;string&amp;quot;
      responses:
        302:
          description: &amp;quot;Successful Operation&amp;quot;

    post:
      description: Return 302 redirect with authorization code
      operationId: postAuthCode
      consumes:
      - &amp;quot;application/x-www-form-urlencoded&amp;quot;
      produces:
      - &amp;quot;application/json&amp;quot;
      parameters:
      - name: &amp;quot;j_username&amp;quot;
        in: &amp;quot;formData&amp;quot;
        description: &amp;quot;User name&amp;quot;
        required: true
        type: &amp;quot;string&amp;quot;
      - name: &amp;quot;j_password&amp;quot;
        in: &amp;quot;formData&amp;quot;
        description: &amp;quot;Password&amp;quot;
        required: true
        type: &amp;quot;string&amp;quot;
      - name: &amp;quot;response_type&amp;quot;
        in: &amp;quot;formData&amp;quot;
        description: &amp;quot;Response type&amp;quot;
        required: true
        type: &amp;quot;string&amp;quot;
        enum: 
        - &amp;quot;code&amp;quot;
      - name: &amp;quot;client_id&amp;quot;
        in: &amp;quot;formData&amp;quot;
        description: &amp;quot;Client Id&amp;quot;
        required: true
        type: &amp;quot;string&amp;quot;
      - name: &amp;quot;redirect_uri&amp;quot;
        in: &amp;quot;formData&amp;quot;
        description: &amp;quot;Redirect Uri&amp;quot;
        required: false
        type: &amp;quot;string&amp;quot;
      - name: &amp;quot;state&amp;quot;
        in: &amp;quot;formData&amp;quot;
        description: &amp;quot;to prevent cross-site request forgery&amp;quot;
        required: false
        type: &amp;quot;string&amp;quot;
      responses:
        302:
          description: &amp;quot;Successful Operation&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;oauth2-code-get&#34;&gt;/oauth2/code@get&lt;/h3&gt;

&lt;p&gt;The get endpoint is the most used as it is very simple and supported by all browsers
without any customization. When request is received by the service, the following
validations or processes are done before issuing a authorization code redirect.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure that user credentials are passed in. Otherwise, it will redirect the
browser to display popup window to collect userId and password. The username and
password will be passed in as Basic Authorization header. The passed in userId
and password will be matched with cached password(which is hashed and salted). If
userId and password combination is not valid, then a brand new popup window will
be shown. Depending on browsers, an error message will be shown up after several
times of retries.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If password is incorrect, then the following error will return.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12016&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 401,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12016&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;INCORRECT_PASSWORD&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Incorrect password.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Make sure that response_type and client_id are passed in as parameters. If not,
the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR11000&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR11000&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;VALIDATOR_REQUEST_PARAMETER_QUERY_MISSING&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Query parameter &#39;%s&#39; is required on path &#39;%s&#39; but not found in request.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If response_type doesn&amp;rsquo;t equal &amp;ldquo;code&amp;rdquo; then the following error will return&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR11002&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR11002&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;VALIDATOR_REQUEST_PARAMETER_ENUM_INVALID&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Value &#39;%s&#39; for parameter &#39;%s&#39; is not allowed. Allowed values are &amp;lt;%s&amp;gt;.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Make sure client_id passed in is valid again in memory client cache. If not,
then the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12014&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 404,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12014&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;CLIENT_NOT_FOUND&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Client %s is not found.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;As you can see from the specification, there is an optional parameter called
redirect_uri. If this parameter is passed in, it will be used to redirect the
authorization code. Otherwise, the default redirect_uri from client_id will be
used. This is retrieved from in memory client cache. The url is populated when
client is registered during on-boarding process.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;oauth2-code-post&#34;&gt;/oauth2/code@post&lt;/h3&gt;

&lt;p&gt;To be completed later&lt;/p&gt;

&lt;h1 id=&#34;token&#34;&gt;Token&lt;/h1&gt;

&lt;p&gt;This is a post endpoint to get JSON web tokens. Currently, it support three different
grant types: authorization_code, client_credentials and password.&lt;/p&gt;

&lt;h2 id=&#34;authorization-code-grant-type&#34;&gt;Authorization Code Grant Type&lt;/h2&gt;

&lt;h3 id=&#34;request-1&#34;&gt;Request&lt;/h3&gt;

&lt;p&gt;The client makes a request to the token endpoint by sending the following
parameters using the &amp;ldquo;application/x-www-form-urlencoded&amp;rdquo; format.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;grant_type
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REQUIRED. Value MUST be set to &amp;ldquo;authorization_code&amp;rdquo;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;code
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REQUIRED.  The authorization code received from the authorization server.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;redirect_uri
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REQUIRED, if the &amp;ldquo;redirect_uri&amp;rdquo; parameter was included in the authorization
request, and their values MUST be identical.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;client_id:client_secret
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REQUIRED, as BASIC authorization header with encoded client_id:client_secret
to authenticate with the authorization server.&lt;/p&gt;

&lt;h3 id=&#34;response-1&#34;&gt;Response&lt;/h3&gt;

&lt;p&gt;If the access token request is valid and authorized, the authorization server
issues an access token and optional refresh token.  If the request client
authentication failed or is invalid, the authorization server returns an error
response.&lt;/p&gt;

&lt;h2 id=&#34;client-credentials-grant-type&#34;&gt;Client Credentials Grant Type&lt;/h2&gt;

&lt;p&gt;The client can request an access token using only its client credentials
(or other supported means of authentication) when the client is requesting
access to the protected resources under its control, or those of another
resource owner that have been previously arranged with the authorization
server.&lt;/p&gt;

&lt;h3 id=&#34;request-2&#34;&gt;Request&lt;/h3&gt;

&lt;p&gt;The client makes a request to the token endpoint by adding the following
parameters using the &amp;ldquo;application/x-www-form-urlencoded&amp;rdquo; format with a
character encoding of UTF-8 in the HTTP request entity-body:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;grant_type
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REQUIRED. Value MUST be set to &amp;ldquo;client_credentials&amp;rdquo;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;scope
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OPTIONAL. The scope of the access request.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;client_id:client_secret
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REQUIRED, as BASIC authorization header with encoded client_id:client_secret
to authenticate with the authorization server.&lt;/p&gt;

&lt;h3 id=&#34;response-2&#34;&gt;Response&lt;/h3&gt;

&lt;p&gt;If the access token request is valid and authorized, the authorization server
issues an access token. A refresh token SHOULD NOT be included. If the request
failed client authentication or is invalid, the authorization server returns
an error response.&lt;/p&gt;

&lt;h2 id=&#34;resource-owner-password-credentials-grant-type&#34;&gt;Resource Owner Password Credentials Grant Type&lt;/h2&gt;

&lt;p&gt;The resource owner password credentials grant type is suitable in cases where
the resource owner has a trust relationship with the client, such as the device
operating system or a highly privileged application. The authorization server
should take special care when enabling this grant type and only allow it when
other flows are not viable. In this implementation, only client registered as
trusted can use password grant type.&lt;/p&gt;

&lt;p&gt;This grant type is suitable for clients capable of obtaining the resource owner&amp;rsquo;s
credentials (username and password, typically using an interactive form).  It is
also used to migrate existing clients using direct authentication schemes such as
HTTP Basic or Digest authentication to OAuth by converting the stored credentials
to an access token.&lt;/p&gt;

&lt;h3 id=&#34;request-3&#34;&gt;Request&lt;/h3&gt;

&lt;p&gt;The client makes a request to the token endpoint by adding the following
parameters using the &amp;ldquo;application/x-www-form-urlencoded&amp;rdquo; format with a character
encoding of UTF-8 in the HTTP request entity-body:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;grant_type
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REQUIRED. Value MUST be set to &amp;ldquo;password&amp;rdquo;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;username&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REQUIRED. The resource owner username.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;password&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REQUIRED. The resource owner password.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;scope
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OPTIONAL. The scope of the access request.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;client_id:client_secret
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REQUIRED, as BASIC authorization header with encoded client_id:client_secret
to authenticate with the authorization server.&lt;/p&gt;

&lt;h3 id=&#34;response-3&#34;&gt;Response&lt;/h3&gt;

&lt;p&gt;If the access token request is valid and authorized, the authorization server
issues an access token and optional refresh token. If the request failed client
authentication or is invalid, the authorization server returns an error response.&lt;/p&gt;

&lt;h2 id=&#34;service-1&#34;&gt;Service&lt;/h2&gt;

&lt;p&gt;There is only one post endpoint for this service and the default port is 6882.&lt;/p&gt;

&lt;p&gt;Here is the specification.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger: &#39;2.0&#39;

info:
  version: &amp;quot;1.0.0&amp;quot;
  title: OAuth2 Service Token Service
  description: OAuth2 Service that issues access tokens. 
  contact:
    email: stevehu@gmail.com
  license:
    name: &amp;quot;Apache 2.0&amp;quot;
    url: &amp;quot;http://www.apache.org/licenses/LICENSE-2.0.html&amp;quot;
host: oauth2.networknt.com
schemes:
  - http
  - https

consumes:
  - application/x-www-form-urlencoded   
produces:
  - application/json

paths:
  /oauth2/token:
    post:
      description: JSON object that contains access token
      operationId: postToken
      parameters:
      - name: authorization
        description: &amp;quot;encoded client_id and client_secret pair&amp;quot;
        in: header
        type: string
        required: true      
      - name: grant_type
        type: string
        enum: 
        - authorization_code
        - client_credentials
        - password
        required: true
        in: formData
      - name: code
        description: &amp;quot;used in authorization_code to specify the code&amp;quot; 
        type: string
        in: formData
      - name: username
        description: &amp;quot;mandatory in password grant type&amp;quot;
        type: string
        in: formData
      - name: password
        description: &amp;quot;mandatory in password grant type&amp;quot;
        type: string
        in: formData
      - name: scope
        description: &amp;quot;used by all flows to specify scope in the access token&amp;quot;
        type: string
        in: formData
      - name: redirect_uri
        description: &amp;quot;used in authorization code if code endpoint with rediret_uri&amp;quot;
        type: string
        in: formData
      responses:
        200:
          description: &amp;quot;Successful Operation&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;oauth2-token&#34;&gt;/oauth2/token&lt;/h3&gt;

&lt;p&gt;When a post request is received, the following validations and processes will be performed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The handler expects a x-www-form-urlencoded form and if it doesn&amp;rsquo;t exist, the following
error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12000&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12000&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;UNABLE_TO_PARSE_FORM_DATA&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Unable to parse x-www-form-urlencoded form data.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The parameter grant type should only allowed client_credentials and authorization_code. If
other grant_type is passed in, the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12001&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12001&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;UNSUPPORTED_GRANT_TYPE&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Unsupported grant type %s. Only authorization_code and client_credentials are supported.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;When this endpoint is called, the client_id and client_secret must be base64 encoded and put
into Authorization header. If there is no Authorization header available in the request, the
following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR11017&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR11017&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;VALIDATOR_REQUEST_PARAMETER_HEADER_MISSING&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Header parameter &#39;%s&#39; is required on path &#39;%s&#39; but not found in request.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;When validating client_id and client_secret, the first thing is to check the client_id in
the client cache in memory. If client_id doesn&amp;rsquo;t exist, the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12014&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 404,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12014&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;CLIENT_NOT_FOUND&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Client %s is not found.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The encoded client_id:client_secret combination will be decoded and then client secret will
be checked with hashed and salted in memory client secret to make sure it is correct. If the
client secret is not correct, the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12007&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 401,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12007&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;UNAUTHORIZED_CLIENT&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Unauthorized client with wrong client secret.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If the basic client_id:client_secret cannot be decoded and parsed correctly, the following
error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12004&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 401,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12004&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;INVALID_BASIC_CREDENTIALS&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Invalid Basic credentials %s.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If there is no Basic authorization header passed in, i.e. a bearer token is passed in, the
following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12003&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 401,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12003&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;INVALID_AUTHORIZATION_HEADER&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Invalid authorization header %s. Basic authentication with credentials is required.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If all validation is passed, a JWT token will be generated and returned in a JSON object.&lt;/p&gt;

&lt;h1 id=&#34;service-2&#34;&gt;Service&lt;/h1&gt;

&lt;p&gt;Every micro service or API needs to register itself to OAuth2 server in order to control who
can access it. During the registration/on-boarding, a list of scopes defined in the OpenAPI
specification should be populated as well. This list of scopes will be used for client to
register scopes in order to access this particular service or API.&lt;/p&gt;

&lt;p&gt;This service has several endpoints and listening to port 6883.&lt;/p&gt;

&lt;p&gt;Here is the specification.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger: &#39;2.0&#39;

info:
  version: &amp;quot;1.0.0&amp;quot;
  title: OAuth2 Service Registration
  description: OAuth2 Service Registration microservices endpoints. 
  contact:
    email: stevehu@gmail.com
  license:
    name: &amp;quot;Apache 2.0&amp;quot;
    url: &amp;quot;http://www.apache.org/licenses/LICENSE-2.0.html&amp;quot;
host: oauth2.networknt.com
schemes:
  - http
  - https

consumes:
  - application/json
produces:
  - application/json

paths:
  /oauth2/service:
    post:
      description: Return a service object
      operationId: createService
      parameters:
      - in: &amp;quot;body&amp;quot;
        name: &amp;quot;body&amp;quot;
        description: &amp;quot;Service object that needs to be added&amp;quot;
        required: true
        schema:
          $ref: &amp;quot;#/definitions/Service&amp;quot;      
      responses:
        200:
          description: Successful response
          schema:
            $ref: &amp;quot;#/definitions/Service&amp;quot;          
      security:
      - service_auth:
        - &amp;quot;oauth.service.w&amp;quot;
    put:
      description: Return the updated service
      operationId: updateService
      parameters:
      - in: &amp;quot;body&amp;quot;
        name: &amp;quot;body&amp;quot;
        description: &amp;quot;Service object that needs to be added&amp;quot;
        required: true
        schema:
          $ref: &amp;quot;#/definitions/Service&amp;quot;      
      responses:
        200:
          description: Successful response
          schema:
            $ref: &amp;quot;#/definitions/Service&amp;quot;          
      security:
      - service_auth:
        - &amp;quot;oauth.service.w&amp;quot;
    get:
      description: Return all services
      operationId: getAllService
      parameters:
      - name: &amp;quot;page&amp;quot;
        in: &amp;quot;query&amp;quot;
        description: &amp;quot;Page number&amp;quot;
        required: true
        type: &amp;quot;integer&amp;quot;
        format: &amp;quot;int32&amp;quot;
      - name: &amp;quot;pageSize&amp;quot;
        in: &amp;quot;query&amp;quot;
        description: &amp;quot;Pag size&amp;quot;
        required: false
        type: &amp;quot;integer&amp;quot;
        format: &amp;quot;int32&amp;quot;
      - name: &amp;quot;serviceId&amp;quot;
        in: &amp;quot;query&amp;quot;
        description: &amp;quot;Partial serviceId for filter&amp;quot;
        required: false
        type: &amp;quot;string&amp;quot;
      responses:
        200:
          description: &amp;quot;successful operation&amp;quot;
          schema:
            type: &amp;quot;array&amp;quot;
            items:
              $ref: &amp;quot;#/definitions/Service&amp;quot;
      security:
      - service_auth:
        - &amp;quot;oauth.service.r&amp;quot;
          
  /oauth2/service/{serviceId}:
    delete:
      description: Delete a service by Id
      operationId: deleteService
      parameters:
      - name: &amp;quot;serviceId&amp;quot;
        in: &amp;quot;path&amp;quot;
        description: &amp;quot;Service Id&amp;quot;
        required: true
        type: &amp;quot;string&amp;quot;
      responses:
        400:
          description: &amp;quot;Invalid serviceId supplied&amp;quot;
        404:
          description: &amp;quot;Service not found&amp;quot;
      security:
        - service_auth:
          - oauth.service.w
    get:
      description: Get a service by Id
      operationId: getService
      parameters:
      - name: &amp;quot;serviceId&amp;quot;
        in: &amp;quot;path&amp;quot;
        description: &amp;quot;Service Id&amp;quot;
        required: true
        type: &amp;quot;string&amp;quot;
      responses:
        200: 
          description: Successful response
          schema:
            $ref: &amp;quot;#/definitions/Service&amp;quot;          
        400:
          description: &amp;quot;Invalid serviceId supplied&amp;quot;
        404:
          description: &amp;quot;Service not found&amp;quot;
      security:
        - service_auth:
          - oauth.service.r
          - oauth.service.w

securityDefinitions:
  service_auth:
    type: &amp;quot;oauth2&amp;quot;
    authorizationUrl: &amp;quot;http://localhost:8888/oauth2/code&amp;quot;
    flow: &amp;quot;implicit&amp;quot;
    scopes:
      oauth.service.w: &amp;quot;write oauth service&amp;quot;
      oauth.service.r: &amp;quot;read oauth service&amp;quot;
definitions:
  Service:
    type: &amp;quot;object&amp;quot;
    required:
    - &amp;quot;serviceId&amp;quot;
    - &amp;quot;serviceName&amp;quot;
    - &amp;quot;serviceType&amp;quot;
    - &amp;quot;scope&amp;quot;
    properties:
      serviceId:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;a unique service id&amp;quot;
      serviceType:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;service type&amp;quot;
        enum:
        - &amp;quot;ms&amp;quot;
        - &amp;quot;api&amp;quot;
      serviceName:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;service name&amp;quot;
      serviceDesc:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;service description&amp;quot;
      ownerId:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;service owner userId&amp;quot;
      scope:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;service scopes separated by space&amp;quot;
      createDt:
        type: &amp;quot;string&amp;quot;
        format: &amp;quot;date-time&amp;quot;
        description: &amp;quot;create date time&amp;quot;
      updateDt:
        type: &amp;quot;string&amp;quot;
        format: &amp;quot;date-time&amp;quot;
        description: &amp;quot;update date time&amp;quot;
        

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;oauth2-service-get&#34;&gt;/oauth2/service@get&lt;/h2&gt;

&lt;p&gt;This endpoint gets all the services from service with filter and sorted on
serviceId. A page query parameter is mandatory and pageSize and serviceId filter
are optional.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Page number which must be specified. It starts with 1 and an empty list will
be returned if the page is greater than the last page.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pageSize&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Default pageSize is 10 and you can overwrite it with another number. Please don&amp;rsquo;t
use a big number due to performance reason.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;serviceId&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the only filter available and it supports filter by start with a few characters.
For example, &amp;ldquo;serviceId=abc&amp;rdquo; means any serviceId starts with &amp;ldquo;abc&amp;rdquo;. The result is also
sorted by serviceId in the pagination.&lt;/p&gt;

&lt;p&gt;The following validation will be performed in the service.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If page is missing from the query parameter, an error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR11000&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR11000&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;VALIDATOR_REQUEST_PARAMETER_QUERY_MISSING&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Query parameter &#39;%s&#39; is required on path &#39;%s&#39; but not found in request.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;oauth2-service-post&#34;&gt;/oauth2/service@post&lt;/h2&gt;

&lt;p&gt;This endpoint is used to create a new service. The following validation will be performed
before a new service is created.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If serviceId exists in the cache, then the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12018&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12018&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;SERVICE_ID_EXISTS&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Service id %s exists.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If ownerId doesn&amp;rsquo;t exist in user cache, then the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12013&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 404,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12013&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;USER_NOT_FOUND&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;User %s is not found.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;oauth2-service-put&#34;&gt;/oauth2/service@put&lt;/h2&gt;

&lt;p&gt;This is the endpoint to update existing service. Before service is updated, the
following validation will be performed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If serviceId cannot be found in the service cache, then the following error will be
returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12015&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 404,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12015&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;SERVICE_NOT_FOUND&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Service %s is not found.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If ownerId doesn&amp;rsquo;t exist in user cache, then the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12013&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 404,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12013&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;USER_NOT_FOUND&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;User %s is not found.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;oauth2-service-serviceid-delete&#34;&gt;/oauth2/service/{serviceId}@delete&lt;/h2&gt;

&lt;p&gt;This endpoint is used to delete existing service. Before the service is deleted,
the following validations will be performed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If serviceId cannot be found in the service cache, then the following error will be
returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12015&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 404,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12015&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;SERVICE_NOT_FOUND&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Service %s is not found.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;oauth2-service-serviceid-get&#34;&gt;/oauth2/service/{serviceId}@get&lt;/h2&gt;

&lt;p&gt;This endpoint is used to get a particular service by serviceId. Before the service is
returned, the following validation will be performed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If serviceId cannot be found in the service cache, then the following error will be
returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12015&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 404,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12015&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;SERVICE_NOT_FOUND&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Service %s is not found.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;client&#34;&gt;Client&lt;/h1&gt;

&lt;p&gt;Before initiating the protocol, the client registers with the authorization server. The
means through which the client registers with the authorization server are not defined
in OAuth 2.0 specification.&lt;/p&gt;

&lt;p&gt;As an extension, we have implemented client registration/on-boarding as a micro service
that exposes several endpoints.&lt;/p&gt;

&lt;p&gt;Before digging into the details of implementation, let&amp;rsquo;s clarify some concepts about
client.&lt;/p&gt;

&lt;h2 id=&#34;client-type&#34;&gt;Client Type&lt;/h2&gt;

&lt;p&gt;OAuth defines two client types, based on their ability to authenticate securely with
the authorization server (i.e., ability to maintain the confidentiality of their
client credentials):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;confidential&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Clients capable of maintaining the confidentiality of their credentials (e.g., client
implemented on a secure server with restricted access to the client credentials), or
capable of secure client authentication using other means.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Clients incapable of maintaining the confidentiality of their credentials (e.g.,
clients executing on the device used by the resource owner, such as an installed
native application or a web browser-based application), and incapable of secure
client authentication via any other means.&lt;/p&gt;

&lt;p&gt;Above are standard client types defined in the specification and we have added
another one to control which client can issue resource owner password credentials
grant request.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;trusted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These clients are marked as trusted and they are the only clients that can issue
resource owner password credentials grant type. For API management team, please
make sure that trusted client is also confidential and the client and resource
must be deployed and managed by the same organization as this flow is not as
secure as authorization code and client credentials flows.&lt;/p&gt;

&lt;p&gt;The client type designation is based on the authorization server&amp;rsquo;s definition of
secure authentication and its acceptable exposure levels of client credentials.&lt;br /&gt;
The authorization server does not make assumptions about the client type.&lt;/p&gt;

&lt;p&gt;A client may be implemented as a distributed set of components or services, each
with a different client type and security context (e.g., a distributed client with
both a confidential server-based component and a public browser-based component).&lt;br /&gt;
In this case, the client should register each component or service as a separate
client.&lt;/p&gt;

&lt;p&gt;In a microservices architecture, a service might call other services to fulfill
its request, in this case, it should register itself as a service and a client.
That means the owner needs to follow both service on-boarding and client on-boarding
processes.&lt;/p&gt;

&lt;h2 id=&#34;client-profile&#34;&gt;Client Profile&lt;/h2&gt;

&lt;p&gt;This specification has been designed around the following client profiles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;web application (web server)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A web application is a confidential client running on a web server. Resource owners
access the client via an HTML user interface rendered in a user-agent on the device
used by the resource owner. The client credentials as well as any access token issued
to the client are stored on the web server and are not exposed to or accessible by
the resource owner.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user-agent-based application (browser)
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A user-agent-based application is a public client in which the client code is
downloaded from a web server and executes within a user-agent (e.g., web browser) on
the device used by the resource owner. Protocol data and credentials are easily
accessible (and often visible) to the resource owner. Since such applications
reside within the user-agent, they can make seamless use of the user-agent
capabilities when requesting authorization.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;native application (mobile)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A native application is a public client installed and executed on the device used by
the resource owner. Protocol data and credentials are accessible to the resource owner.&lt;br /&gt;
It is assumed that any client authentication credentials included in the application can
be extracted. On the other hand, dynamically issued credentials such as access tokens or
refresh tokens can receive an acceptable level of protection. At a minimum, these
credentials are protected from hostile servers with which the application may interact.&lt;br /&gt;
On some platforms, these credentials might be protected from other applications residing
on the same device.&lt;/p&gt;

&lt;p&gt;The specification only mentioned above client profiles and the following two profiles
are added in our OAuth 2.0 implementation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;batch application (batch)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Batch jobs are very similar with web application but they are managed by enterprise
scheduler and executed in a projected environment. It is considered as confidential
client.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;service (service)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Services are usually protected as resources but in a microservices architecture, a
service can also be a client to call other services or resources. These services
normally running within light-weight containers in a secured environment. And they
are considered as confidential clients.&lt;/p&gt;

&lt;h2 id=&#34;client-identifier&#34;&gt;Client Identifier&lt;/h2&gt;

&lt;p&gt;The authorization server issues the registered client a client identifier - a unique
string representing the registration information provided by the client. The client
identifier is not a secret; it is exposed to the resource owner and MUST NOT be used
alone for client authentication. The client identifier is unique to the authorization
server. In our implementation, it is a UUID generated on the server. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;f7d42348-c647-4efb-a52d-4c5787421e72
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;client-secret&#34;&gt;Client Secret&lt;/h2&gt;

&lt;p&gt;Clients in possession of a client secret MAY use the HTTP Basic authentication scheme
as defined in [RFC2617] to authenticate with the authorization server. The client
identifier is encoded using the &amp;ldquo;application/x-www-form-urlencoded&amp;rdquo; encoding algorithm
, and the encoded value is used as the username; the client secret is encoded using
the same algorithm and used as the password. The authorization server supports the HTTP
Basic authentication scheme for authenticating clients that were issued a client secret.&lt;/p&gt;

&lt;p&gt;For example (with extra line breaks for display purposes only):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;other-authentication-methods&#34;&gt;Other Authentication Methods&lt;/h2&gt;

&lt;p&gt;Currently we don&amp;rsquo;t support other authentication method but we are open to support others
if there are request from our users.&lt;/p&gt;

&lt;h2 id=&#34;unregistered-clients&#34;&gt;Unregistered Clients&lt;/h2&gt;

&lt;p&gt;Due to security reasons, all client must be registered before authenticated on the server.
Unregistered clients are not supported on this implementation.&lt;/p&gt;

&lt;h2 id=&#34;client-micro-service&#34;&gt;Client Micro Service&lt;/h2&gt;

&lt;p&gt;This service has several endpoints and listening to port 6884.&lt;/p&gt;

&lt;p&gt;Here is the specification.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger: &#39;2.0&#39;

info:
  version: &amp;quot;1.0.0&amp;quot;
  title: OAuth2 Client Registration
  description: OAuth2 Client Registration microservices endpoints. 
  contact:
    email: stevehu@gmail.com
  license:
    name: &amp;quot;Apache 2.0&amp;quot;
    url: &amp;quot;http://www.apache.org/licenses/LICENSE-2.0.html&amp;quot;
host: oauth2.networknt.com
schemes:
  - http
  - https

consumes:
  - application/json
produces:
  - application/json

paths:
  /oauth2/client:
    post:
      description: Return a client object
      operationId: createClient
      parameters:
      - in: &amp;quot;body&amp;quot;
        name: &amp;quot;body&amp;quot;
        description: &amp;quot;Client object that needs to be added&amp;quot;
        required: true
        schema:
          $ref: &amp;quot;#/definitions/Client&amp;quot;      
      responses:
        200:
          description: Successful response
          schema:
            $ref: &amp;quot;#/definitions/Client&amp;quot;          
      security:
      - client_auth:
        - &amp;quot;oauth.client.w&amp;quot;
    put:
      description: Return the updated client
      operationId: updateClient
      parameters:
      - in: &amp;quot;body&amp;quot;
        name: &amp;quot;body&amp;quot;
        description: &amp;quot;Client object that needs to be added&amp;quot;
        required: true
        schema:
          $ref: &amp;quot;#/definitions/Client&amp;quot;      
      responses:
        200:
          description: Successful response
          schema:
            $ref: &amp;quot;#/definitions/Client&amp;quot;          
      security:
      - client_auth:
        - &amp;quot;oauth.client.w&amp;quot;
    get:
      description: Return all clients
      operationId: getAllClient
      parameters:
      - name: &amp;quot;page&amp;quot;
        in: &amp;quot;query&amp;quot;
        description: &amp;quot;Page number&amp;quot;
        required: true
        type: &amp;quot;integer&amp;quot;
        format: &amp;quot;int32&amp;quot;
      - name: &amp;quot;pageSize&amp;quot;
        in: &amp;quot;query&amp;quot;
        description: &amp;quot;Pag size&amp;quot;
        required: false
        type: &amp;quot;integer&amp;quot;
        format: &amp;quot;int32&amp;quot;
      - name: &amp;quot;clientName&amp;quot;
        in: &amp;quot;query&amp;quot;
        description: &amp;quot;Partial clientName for filter&amp;quot;
        required: false
        type: &amp;quot;string&amp;quot;
      responses:
        200:
          description: &amp;quot;successful operation&amp;quot;
          schema:
            type: &amp;quot;array&amp;quot;
            items:
              $ref: &amp;quot;#/definitions/Client&amp;quot;
      security:
      - client_auth:
        - &amp;quot;oauth.client.r&amp;quot;
          
  /oauth2/client/{clientId}:
    delete:
      description: Delete a client by Id
      operationId: deleteClient
      parameters:
      - name: &amp;quot;clientId&amp;quot;
        in: &amp;quot;path&amp;quot;
        description: &amp;quot;Client Id&amp;quot;
        required: true
        type: &amp;quot;string&amp;quot;
      responses:
        400:
          description: &amp;quot;Invalid clientId supplied&amp;quot;
        404:
          description: &amp;quot;Client not found&amp;quot;
      security:
        - client_auth:
          - oauth.client.w
    get:
      description: Get a client by Id
      operationId: getClient
      parameters:
      - name: &amp;quot;clientId&amp;quot;
        in: &amp;quot;path&amp;quot;
        description: &amp;quot;Client Id&amp;quot;
        required: true
        type: &amp;quot;string&amp;quot;
      responses:
        200: 
          description: Successful response
          schema:
            $ref: &amp;quot;#/definitions/Client&amp;quot;          
        400:
          description: &amp;quot;Invalid clientId supplied&amp;quot;
        404:
          description: &amp;quot;Client not found&amp;quot;
      security:
        - client_auth:
          - oauth.client.r
          - oauth.client.w

securityDefinitions:
  client_auth:
    type: &amp;quot;oauth2&amp;quot;
    authorizationUrl: &amp;quot;http://localhost:8888/oauth2/code&amp;quot;
    flow: &amp;quot;implicit&amp;quot;
    scopes:
      oauth.client.w: &amp;quot;write oauth client&amp;quot;
      oauth.client.r: &amp;quot;read oauth client&amp;quot;
definitions:
  Client:
    type: &amp;quot;object&amp;quot;
    required:
    - clientType
    - clientProfile
    - clientName
    - clientDesc
    - ownerId
    - scope
    properties:
      clientId:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;a unique client id&amp;quot;
      clientSecret:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;client secret&amp;quot;
      clientType:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;client type&amp;quot;
        enum:
        - confidential
        - public
        - trusted
      clientProfile:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;client profile&amp;quot;
        enum:
        - webserver
        - browser
        - mobile
        - service
        - batch
      clientName:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;client name&amp;quot;
      clientDesc:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;client description&amp;quot;
      ownerId:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;client owner id&amp;quot;
      scope:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;client scope separated by space&amp;quot;
      redirectUri:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;redirect uri&amp;quot;
      createDt:
        type: &amp;quot;string&amp;quot;
        format: &amp;quot;date-time&amp;quot;
        description: &amp;quot;create date time&amp;quot;
      updateDt:
        type: &amp;quot;string&amp;quot;
        format: &amp;quot;date-time&amp;quot;
        description: &amp;quot;update date time&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;oauth2-client-clientid-delete&#34;&gt;/oauth2/client/{clientId}@delete&lt;/h3&gt;

&lt;p&gt;This endpoint is used to delete existing client. The following validation will be
performed in the service.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If clientId cannot be found in the in-memory grid, then the following error will
be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12014&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 404,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12014&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;CLIENT_NOT_FOUND&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Client %s is not found.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;oauth2-client-clientid-get&#34;&gt;/oauth2/client/{clientId}@get&lt;/h3&gt;

&lt;p&gt;This endpoint is used to get a particular client with clientId. The following
validation will be performed in the service.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If clientId cannot be found in the in-memory grid, then the following error will
be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12014&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 404,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12014&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;CLIENT_NOT_FOUND&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Client %s is not found.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;oauth2-client-get&#34;&gt;/oauth2/client@get&lt;/h3&gt;

&lt;p&gt;This endpoint gets all the clients from client service with filter and sorted on
clientName. A page query parameter is mandatory and pageSize and clientName filter
are optional.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Page number which must be specified. It starts with 1 and an empty list will
be returned if the page is greater than the last page.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pageSize&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Default pageSize is 10 and you can overwrite it with another number. Please don&amp;rsquo;t
use a big number due to performance reason.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clientName&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the only filter available and it supports filter by start with a few characters.
For example, &amp;ldquo;clientName=abc&amp;rdquo; means any clientName starts with &amp;ldquo;abc&amp;rdquo;. The result is also
sorted by clientName in the pagination.&lt;/p&gt;

&lt;p&gt;The following validation will be performed in the service.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If page is missing from the query parameter, an error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR11000&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR11000&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;VALIDATOR_REQUEST_PARAMETER_QUERY_MISSING&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Query parameter &#39;%s&#39; is required on path &#39;%s&#39; but not found in request.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;oauth2-client-post&#34;&gt;/oauth2/client@post&lt;/h3&gt;

&lt;p&gt;This endpoint is used to create a new client. This usually will be called from light-portal
and the following validations will be performed before a new client is added.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Verify that clientId exist in the cache. The clientId is generated as a UUID so this
cannot be triggered. It is implemented this way just want to be in sync with other
services.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12019&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12019&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;CLIENT_ID_EXISTS&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Client id %s exists.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Verify that ownerId is in user cache in memory. If it doesn&amp;rsquo;t exist, the following
error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12013&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 404,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12013&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;USER_NOT_FOUND&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;User %s is not found.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Make sure the clientType is from a list of valid values. If not, an error message
will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR11004&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR11004&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;VALIDATOR_SCHEMA&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Schema Validation Error - %s&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Make sure that clientProfile is from a list of valid values. If not, an error
message will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR11004&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR11004&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;VALIDATOR_SCHEMA&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Schema Validation Error - %s&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;oauth2-client-put&#34;&gt;/oauth2/client@put&lt;/h3&gt;

&lt;p&gt;This endpoint is used to update an existing client. This usually will be called from
light-portal and the following validations will be performed before a client is updated.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Verify that clientId exist in the cache. If clientId doesn&amp;rsquo;t existing the cache, an
error message will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12014&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 404,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12014&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;CLIENT_NOT_FOUND&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Client %s is not found.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Verify that ownerId is in user cache in memory. If it doesn&amp;rsquo;t exist, the following
error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12013&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 404,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12013&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;USER_NOT_FOUND&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;User %s is not found.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Make sure the clientType is from a list of valid values. If not, an error message
will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR11004&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR11004&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;VALIDATOR_SCHEMA&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Schema Validation Error - %s&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Make sure that clientProfile is from a list of valid values. If not, an error
message will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR11004&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR11004&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;VALIDATOR_SCHEMA&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Schema Validation Error - %s&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;user&#34;&gt;User&lt;/h1&gt;

&lt;p&gt;This is a service for user registration and management. The OAuth server supports
integration with other user management system like active directory or LDAP.
However, for most enterprise customers, their customer information normally will
be in database. This service provides a database table for user management and
several endpoints to manage users.&lt;/p&gt;

&lt;p&gt;In OAuth 2.0 specification, user is normally called resource owner.&lt;/p&gt;

&lt;h2 id=&#34;user-type&#34;&gt;User Type&lt;/h2&gt;

&lt;p&gt;Currently there are three user types to support.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;customer&lt;/li&gt;
&lt;li&gt;partner&lt;/li&gt;
&lt;li&gt;employee&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;user-id&#34;&gt;User Id&lt;/h2&gt;

&lt;p&gt;User id must be unique within the system.&lt;/p&gt;

&lt;h2 id=&#34;password&#34;&gt;Password&lt;/h2&gt;

&lt;p&gt;Password is provided when registering and it is hashed and salted in persistence
layer.&lt;/p&gt;

&lt;h2 id=&#34;user-micro-service&#34;&gt;User Micro Service&lt;/h2&gt;

&lt;p&gt;This service has several endpoints and listening to port 6885.&lt;/p&gt;

&lt;p&gt;Here is the specification.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger: &#39;2.0&#39;

info:
  version: &amp;quot;1.0.0&amp;quot;
  title: OAuth2 User Service
  description: OAuth2 User Service microservices endpoints. 
  contact:
    email: stevehu@gmail.com
  license:
    name: &amp;quot;Apache 2.0&amp;quot;
    url: &amp;quot;http://www.apache.org/licenses/LICENSE-2.0.html&amp;quot;
host: oauth2.networknt.com
schemes:
  - http
  - https

consumes:
  - application/json
produces:
  - application/json

paths:
  /oauth2/user:
    get:
      description: Return all users
      operationId: getAllUsers
      parameters:
      - name: &amp;quot;page&amp;quot;
        in: &amp;quot;query&amp;quot;
        description: &amp;quot;Page number&amp;quot;
        required: true
        type: &amp;quot;integer&amp;quot;
        format: &amp;quot;int32&amp;quot;
      - name: &amp;quot;pageSize&amp;quot;
        in: &amp;quot;query&amp;quot;
        description: &amp;quot;Pag size&amp;quot;
        required: false
        type: &amp;quot;integer&amp;quot;
        format: &amp;quot;int32&amp;quot;
      - name: &amp;quot;userId&amp;quot;
        in: &amp;quot;query&amp;quot;
        description: &amp;quot;Partial userId for filter&amp;quot;
        required: false
        type: &amp;quot;string&amp;quot;
      responses:
        200:
          description: &amp;quot;successful operation&amp;quot;
          schema:
            type: &amp;quot;array&amp;quot;
            items:
              $ref: &amp;quot;#/definitions/User&amp;quot;
      security:
      - user_auth:
        - &amp;quot;oauth.user.r&amp;quot;
    post:
      description: Return a user object
      operationId: createUser
      parameters:
      - in: &amp;quot;body&amp;quot;
        name: &amp;quot;body&amp;quot;
        description: &amp;quot;User object that needs to be added&amp;quot;
        required: true
        schema:
          $ref: &amp;quot;#/definitions/User&amp;quot;      
      responses:
        200:
          description: Successful response
      security:
      - user_auth:
        - &amp;quot;oauth.user.w&amp;quot;
    put:
      description: Return the updated user
      operationId: updateUser
      parameters:
      - in: &amp;quot;body&amp;quot;
        name: &amp;quot;body&amp;quot;
        description: &amp;quot;User object that needs to be added&amp;quot;
        required: true
        schema:
          $ref: &amp;quot;#/definitions/User&amp;quot;      
      responses:
        200:
          description: Successful response
      security:
      - user_auth:
        - &amp;quot;oauth.user.w&amp;quot;
          
  /oauth2/user/{userId}:
    delete:
      description: Delete a user by Id
      operationId: deleteUser
      parameters:
      - name: &amp;quot;userId&amp;quot;
        in: &amp;quot;path&amp;quot;
        description: &amp;quot;User Id&amp;quot;
        required: true
        type: &amp;quot;string&amp;quot;
      responses:
        400:
          description: &amp;quot;Invalid userId supplied&amp;quot;
        404:
          description: &amp;quot;User not found&amp;quot;
      security:
        - user_auth:
          - oauth.user.w
    get:
      description: Get a user by Id
      operationId: getUser
      parameters:
      - name: &amp;quot;userId&amp;quot;
        in: &amp;quot;path&amp;quot;
        description: &amp;quot;User Id&amp;quot;
        required: true
        type: &amp;quot;string&amp;quot;
      responses:
        200: 
          description: Successful response
          schema:
            $ref: &amp;quot;#/definitions/User&amp;quot;          
        400:
          description: &amp;quot;Invalid userId supplied&amp;quot;
        404:
          description: &amp;quot;User not found&amp;quot;
      security:
        - user_auth:
          - oauth.user.r
          - oauth.user.w
  /oauth2/password/{userId}:
    post:
      description: Reset Password
      operationId: resetPassword
      parameters:
      - in: &amp;quot;body&amp;quot;
        name: &amp;quot;body&amp;quot;
        description: &amp;quot;Password object that needs to be added&amp;quot;
        required: true
        schema:
          $ref: &amp;quot;#/definitions/Password&amp;quot;      
      - name: &amp;quot;userId&amp;quot;
        in: &amp;quot;path&amp;quot;
        description: &amp;quot;User Id&amp;quot;
        required: true
        type: &amp;quot;string&amp;quot;
      responses:
        404:
          description: &amp;quot;User not found&amp;quot;
      security:
      - user_auth:
        - &amp;quot;oauth.user.w&amp;quot;
          
securityDefinitions:
  user_auth:
    type: &amp;quot;oauth2&amp;quot;
    authorizationUrl: &amp;quot;http://localhost:8888/oauth2/code&amp;quot;
    flow: &amp;quot;implicit&amp;quot;
    scopes:
      oauth.user.w: &amp;quot;write user&amp;quot;
      oauth.user.r: &amp;quot;read user&amp;quot;
definitions:
  User:
    type: &amp;quot;object&amp;quot;
    required:
    - &amp;quot;userId&amp;quot;
    - &amp;quot;userType&amp;quot;
    - &amp;quot;firstName&amp;quot;
    - &amp;quot;lastName&amp;quot;
    - &amp;quot;email&amp;quot;
    properties:
      userId:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;a unique id&amp;quot;
      userType:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;user type&amp;quot;
        enum:
        - &amp;quot;admin&amp;quot;
        - &amp;quot;employee&amp;quot;
        - &amp;quot;customer&amp;quot;
        - &amp;quot;partner&amp;quot;
      firstName:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;first name&amp;quot;
      lastName:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;last name&amp;quot;
      email:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;email address&amp;quot;
      password:
        type: &amp;quot;string&amp;quot;
        format: &amp;quot;password&amp;quot;
        description: &amp;quot;password&amp;quot;
      passwordConfirm:
        type: &amp;quot;string&amp;quot;
        format: &amp;quot;password&amp;quot;
        description: &amp;quot;password confirm&amp;quot;
      createDt:
        type: &amp;quot;string&amp;quot;
        format: &amp;quot;date-time&amp;quot;
        description: &amp;quot;create date time&amp;quot;
      updateDt:
        type: &amp;quot;string&amp;quot;
        format: &amp;quot;date-time&amp;quot;
        description: &amp;quot;update date time&amp;quot;
  Password:
    type: &amp;quot;object&amp;quot;
    required:
    - &amp;quot;password&amp;quot;
    - &amp;quot;newPassword&amp;quot;
    - &amp;quot;newPasswordConfirm&amp;quot;
    properties:
      password:
        type: &amp;quot;string&amp;quot;
        format: &amp;quot;password&amp;quot;
        description: &amp;quot;existing password&amp;quot;
      newPassword:
        type: &amp;quot;string&amp;quot;
        format: &amp;quot;password&amp;quot;
        description: &amp;quot;new password&amp;quot;
      newPasswordConfirm:
        type: &amp;quot;string&amp;quot;
        format: &amp;quot;password&amp;quot;
        description: &amp;quot;new password confirm&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;oauth2-password-userid-post&#34;&gt;/oauth2/password/{userId}@post&lt;/h2&gt;

&lt;p&gt;This endpoint is used to reset user password. The user has to provide existing password,
the new password and password confirmation in order to reset it.&lt;/p&gt;

&lt;p&gt;There are several validations need to be performed before the password can be reset.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If userId cannot be found in the user cache, then the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12013&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 404,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12013&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;USER_NOT_FOUND&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;User %s is not found.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If password is not matched the cached password, then the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12016&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 401,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12016&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;INCORRECT_PASSWORD&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Incorrect password.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If new password and password confirmation are not matched, then the following error
will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12012&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12012&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;PASSWORD_PASSWORDCONFIRM_NOT_MATCH&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Password %s and PasswordConfirm %s are not matched.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;oauth2-user-get&#34;&gt;/oauth2/user@get&lt;/h2&gt;

&lt;p&gt;This endpoint gets all the users from user service with filter and sorted on
userId. A page query parameter is mandatory. pageSize and userId filter
are optional.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Page number which must be specified. It starts with 1 and an empty list will
be returned if the page is greater than the last page.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pageSize&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Default pageSize is 10 and you can overwrite it with another number. Please don&amp;rsquo;t
use a big number due to performance reason.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;userId&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the only filter available and it supports filter by start with a few characters.
For example, &amp;ldquo;userId=abc&amp;rdquo; means any userId starts with &amp;ldquo;abc&amp;rdquo;. The result is also
sorted by userId in the pagination.&lt;/p&gt;

&lt;p&gt;The following validation will be performed in the service.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If page is missing from the query parameter, an error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR11000&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR11000&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;VALIDATOR_REQUEST_PARAMETER_QUERY_MISSING&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Query parameter &#39;%s&#39; is required on path &#39;%s&#39; but not found in request.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;oauth2-user-post&#34;&gt;/oauth2/user@post&lt;/h2&gt;

&lt;p&gt;This endpoint is used to create a new user. The following validations will be performed
before a new user will be added.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the userId exists in the system, then the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12020&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12020&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;USER_ID_EXISTS&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;User id %s exists.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If the email exists in the system, then the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12021&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12021&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;EMAIL_EXISTS&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Email %s exists.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If new password and password confirmation are not matched, the following error
will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12012&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12012&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;PASSWORD_PASSWORDCONFIRM_NOT_MATCH&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Password %s and PasswordConfirm %s are not matched.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If password or password confirmation is empty, the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12011&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 400,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12011&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;PASSWORD_OR_PASSWORDCONFIRM_EMPTY&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Password %s or PasswordConfirm %s is empty.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;oauth2-user-put&#34;&gt;/oauth2/user@put&lt;/h2&gt;

&lt;p&gt;This is the endpoint to update existing user. Most of the attributes of users can be
updated through this endpoint except password. You must use password reset endpoint
to update password.&lt;/p&gt;

&lt;p&gt;The following validations will be performed before the user will be updated.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If userId cannot be found in cache, then the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12013&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 404,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12013&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;USER_NOT_FOUND&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;User %s is not found.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;oauth2-user-userid-delete&#34;&gt;/oauth2/user/{userId}@delete&lt;/h2&gt;

&lt;p&gt;This endpoint is used to delete an existing user. It removes the user physically so
be careful when calling this endpoint. On the user interface, please make sure the
operator confirms the action before submitting the request to the service.&lt;/p&gt;

&lt;p&gt;Before the user is deleted, the following validation will be performed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If userId doesn&amp;rsquo;t exist in memory, then the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12013&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 404,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12013&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;USER_NOT_FOUND&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;User %s is not found.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;oauth2-user-userid-get&#34;&gt;/oauth2/user/{userId}get&lt;/h2&gt;

&lt;p&gt;This is the endpoint to get a particular user with userId. The server will perform
the following validations before the user object is returned to the consumer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If userId doesn&amp;rsquo;t exist in cache, then the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12013&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 404,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12013&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;USER_NOT_FOUND&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;User %s is not found.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;key&#34;&gt;Key&lt;/h1&gt;

&lt;p&gt;In microservices architecture, the traditional way of copying public key certificates
to hosts of services is not working. With container orchestration tool like Kubernetes
old containers can be shutdown and new container can be started at anytime. So the push
certificates to services has to be changed to pull certificates from OAuth2 server
instead. This service is designed to pull public key certificate based on keyId that is
in the JWT token header. It is tighly integrated with Light-Java framework security
component.&lt;/p&gt;

&lt;p&gt;This service is listening to port number 6886.&lt;/p&gt;

&lt;p&gt;Here is the specification&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger: &#39;2.0&#39;

info:
  version: &amp;quot;1.0.0&amp;quot;
  title: OAuth2 Key Service
  description: OAuth2 Key Service microservices endpoints. 
  contact:
    email: stevehu@gmail.com
  license:
    name: &amp;quot;Apache 2.0&amp;quot;
    url: &amp;quot;http://www.apache.org/licenses/LICENSE-2.0.html&amp;quot;
host: oauth2.networknt.com
schemes:
  - http
  - https

consumes:
  - application/json
produces:
  - application/json

paths:
  /oauth2/key/{keyId}:
    get:
      description: Get a key by Id
      operationId: getKeyById
      parameters:
      - name: &amp;quot;keyId&amp;quot;
        in: &amp;quot;path&amp;quot;
        description: &amp;quot;Key Id&amp;quot;
        required: true
        type: &amp;quot;string&amp;quot;
      responses:
        200: 
          description: Successful response
          schema:
            $ref: &amp;quot;#/definitions/Key&amp;quot;          
        400:
          description: &amp;quot;Invalid keyId supplied&amp;quot;
        404:
          description: &amp;quot;Key not found&amp;quot;
      security:
        - key_auth:
          - oauth.key.r
          - oauth.key.w

securityDefinitions:
  key_auth:
    type: &amp;quot;oauth2&amp;quot;
    authorizationUrl: &amp;quot;http://localhost:8888/oauth2/code&amp;quot;
    flow: &amp;quot;implicit&amp;quot;
    scopes:
      oauth.key.w: &amp;quot;write key&amp;quot;
      oauth.key.r: &amp;quot;read key&amp;quot;
definitions:
  Key:
    type: &amp;quot;object&amp;quot;
    required:
    - &amp;quot;keyId&amp;quot;
    - &amp;quot;certificate&amp;quot;
    properties:
      keyId:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;a unique id&amp;quot;
      certificate:
        type: &amp;quot;string&amp;quot;
        description: &amp;quot;certificate&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;oauth2-key-keyid-get&#34;&gt;/oauth2/key/{keyId}@get&lt;/h2&gt;

&lt;p&gt;This endpoint is used to get public key certificate for JWT signature verification based
on keyId in the JWT header. Light-Java framework should have packaged with several keys
already when deployed to production, however, keys are changing frequently as old ones
are expired. You don&amp;rsquo;t want to redeploy your services just due to key changes on the
OAuth server. This endpoint is available for all services which have an entry in client
table so that clientId and clientSecret can be used to verify the identity of the service.&lt;/p&gt;

&lt;p&gt;The following validations are performed before the key is issued by the service.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If authorization header doesn&amp;rsquo;t exist in the request, the following error will be
returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12002&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 401,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12002&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;MISSING_AUTHORIZATION_HEADER&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Missing authorization header. client credentials must be passed in as Authorization header.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If the client secret is not correct when matching with hashed and salted client secret
in cache, then the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12007&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 401,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12007&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;UNAUTHORIZED_CLIENT&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Unauthorized client with wrong client secret.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If the client id in the authorization header doesn&amp;rsquo;t exist in client cache in memory,
then the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR12014&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 404,
    &amp;quot;code&amp;quot;: &amp;quot;ERR12014&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;CLIENT_NOT_FOUND&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Client %s is not found.&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If the keyId cannot be found on the server, then the following error will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;ERR10010&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: 500,
    &amp;quot;code&amp;quot;: &amp;quot;ERR10010&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;RUNTIME_EXCEPTION&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Unexpected runtime exception&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Tools</title>
      <link>https://networknt.github.io/light-oauth2/tools/</link>
      <pubDate>Sun, 01 Jan 2017 09:36:54 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tools/</guid>
      <description>&lt;p&gt;The following tools can be used to test microservices.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;curl/&#34;&gt;curl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;postman/&#34;&gt;postman&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>postman</title>
      <link>https://networknt.github.io/light-oauth2/tools/postman/</link>
      <pubDate>Sun, 01 Jan 2017 09:35:43 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tools/postman/</guid>
      <description></description>
    </item>
    
    <item>
      <title>curl</title>
      <link>https://networknt.github.io/light-oauth2/tools/curl/</link>
      <pubDate>Sun, 01 Jan 2017 09:30:53 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tools/curl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Development Edition</title>
      <link>https://networknt.github.io/light-oauth2/services/development/</link>
      <pubDate>Sun, 01 Jan 2017 09:28:06 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/development/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://networknt.github.io/light-oauth2/getting-started/</link>
      <pubDate>Sat, 31 Dec 2016 21:20:22 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/getting-started/</guid>
      <description>

&lt;h2 id=&#34;oauth2-introduction&#34;&gt;OAuth2 Introduction&lt;/h2&gt;

&lt;p&gt;If you are new to OAuth2, please read this &lt;a href=&#34;introduction/&#34;&gt;introduction&lt;/a&gt; document to get familiar with the concept.&lt;/p&gt;

&lt;h2 id=&#34;select-the-right-edition&#34;&gt;Select the Right Edition&lt;/h2&gt;

&lt;p&gt;There are three editions of OAuth2 server and they should be used in different situations.&lt;/p&gt;

&lt;h3 id=&#34;developerment-edition&#34;&gt;Developerment Edition&lt;/h3&gt;

&lt;p&gt;This is the simplest OAuth2 server designed for development as it doesn&amp;rsquo;t have any dependency.
Client and User info is retrieved from configuration files which can be externalized
and modified.&lt;/p&gt;

&lt;p&gt;This server has two endpoints:&lt;/p&gt;

&lt;p&gt;/oauth2/code&lt;/p&gt;

&lt;p&gt;/oauth2/token&lt;/p&gt;

&lt;p&gt;The code endpoint is to authenticate user and provide authorization code redirect to
the user-agent. It can handle 60K requests per second user login to get auth code on
a core i7 laptop.&lt;/p&gt;

&lt;p&gt;The token endpoint is to issue access token and other tokens. It can generate 700
private key signed JWT tokens per second on a core i7 laptop.&lt;/p&gt;

&lt;p&gt;As client and user info are in JSON config files, it can only manage up to hundreds
of clients and users for development purpose.&lt;/p&gt;

&lt;p&gt;Codebase can be accessed from dev branch and it is functional.&lt;/p&gt;

&lt;h3 id=&#34;enterprise-edition&#34;&gt;Enterprise Edition&lt;/h3&gt;

&lt;p&gt;A microservices and database based OAuth2 server that have 6 services and numeric endpoints to
support user login, access token, user registration, service registration, client
registration and public key certificate distribution. It can support millions users
and thousands of clients and services with scopes. It should be easily handle
thousands of concurrent users per instance and each microservice can be scaled individually.&lt;/p&gt;

&lt;p&gt;Enterprise edition is designed for production use and Specifications can be found at &lt;a href=&#34;https://github.com/networknt/swagger&#34;&gt;https://github.com/networknt/swagger&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Three databases are supported:&lt;/p&gt;

&lt;p&gt;Oracle - Codebase can be acccessed from oracle branch.&lt;/p&gt;

&lt;p&gt;MySQL - Codebase can be accessed from mysql branch&lt;/p&gt;

&lt;p&gt;Postgres - Codebase can be accessed from postgres branch&lt;/p&gt;

&lt;h3 id=&#34;provider-edition&#34;&gt;Provider Edition&lt;/h3&gt;

&lt;p&gt;This is a microservices based OAuth2 server that built on top of light-eventuate
with event sourcing and CQRS. It is designed for OAuth2 service providers who want
ultimate scalability, maximum throughput and minimum latency.&lt;/p&gt;

&lt;p&gt;Codebase can be accessed from kafka branch and it is in planning phase.&lt;/p&gt;

&lt;p&gt;Provider edition is used by service providers and it is yet to be implemented.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://networknt.github.io/light-oauth2/architecture/</link>
      <pubDate>Sat, 31 Dec 2016 21:16:50 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/architecture/</guid>
      <description>

&lt;h2 id=&#34;microservices&#34;&gt;Microservices&lt;/h2&gt;

&lt;p&gt;All three editions are built on top of Light-Java framework as microservices.&lt;/p&gt;

&lt;p&gt;Development edition has only one service with two endpoints for code and token.&lt;/p&gt;

&lt;p&gt;Enterprise edition has six microservices and each serivce has several endpoints to support user login,
access token retrieval, user registration, service registration, client registration and public
key certificate distribution. It can support millions users and thousands of clients
and services with scopes. It should be easily handle thousands of concurrent users per
instance and each service can be scaled individually if necessary.&lt;/p&gt;

&lt;h2 id=&#34;in-memory-data-grid&#34;&gt;In-Memory Data Grid&lt;/h2&gt;

&lt;p&gt;Hazelcast is used as Data Grid across multiple services and majority of operations
won&amp;rsquo;t hit database server for best performance. This also makes database as plugin
so that persistence layer can be anything from SQL to NoSQL.&lt;/p&gt;

&lt;h2 id=&#34;built-in-security&#34;&gt;Built-in Security&lt;/h2&gt;

&lt;p&gt;Except code, token and key services, other services are protected by OAuth2 itself and additional security
as well. These sevices can be deployed at different locations within your network for maximum security and
flexibility.&lt;/p&gt;

&lt;h2 id=&#34;multiple-database-support&#34;&gt;Multiple Database Support&lt;/h2&gt;

&lt;p&gt;Currently, Oralce, MySQL and Postgres are supported, but other databases(sql or nosql) can be easily supported
by implementing a MapStore of Hazelcast and create a initial db script.&lt;/p&gt;

&lt;h2 id=&#34;easy-to-customize-and-integrate&#34;&gt;Easy to customize and integrate&lt;/h2&gt;

&lt;p&gt;Each service can be easily customized and won&amp;rsquo;t impact other services. Also, it is very easy to extend in order
to integrate with other existing services within your organization.&lt;/p&gt;

&lt;h2 id=&#34;three-editions-to-choose-from&#34;&gt;Three Editions to choose from&lt;/h2&gt;

&lt;p&gt;Given your development phase and production requirement, you can choose development edition,
enterprise edition and provider edition for your deployment.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://networknt.github.io/light-oauth2/</link>
      <pubDate>Sat, 31 Dec 2016 20:29:38 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/</guid>
      <description>

&lt;h2 id=&#34;why-this-oauth2-server&#34;&gt;Why this OAuth2 server&lt;/h2&gt;

&lt;h3 id=&#34;fast-and-small-memory-footprint-to-lower-production-cost&#34;&gt;Fast and small memory footprint to lower production cost.&lt;/h3&gt;

&lt;p&gt;The Development Edition can support 60000 user login and get authorization code redirect
and can generate 700 access tokens per second on my laptop.&lt;/p&gt;

&lt;p&gt;The Enterprise Edition has 6 microservices and each service can be scaled individually.&lt;/p&gt;

&lt;h3 id=&#34;seamlessly-integration-with-light-java-framework&#34;&gt;Seamlessly integration with Light-Java framework&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Built on top of Light-Java&lt;/li&gt;
&lt;li&gt;Light-Java Client and Security modules manages all the communication with OAuth2&lt;/li&gt;
&lt;li&gt;Support service onboarding from Light-Portal&lt;/li&gt;
&lt;li&gt;Support client onboarding from Light-Portal&lt;/li&gt;
&lt;li&gt;Support user management from Light-Portal&lt;/li&gt;
&lt;li&gt;Open sourced OpenAPI specifications for all microserivces&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-edition-for-api-or-service-development-and-integration&#34;&gt;Development Edition for API or Service development and integration&lt;/h3&gt;

&lt;p&gt;It has no dependency and everything is in memory with extenalized configuration for
users and clients.&lt;/p&gt;

&lt;h3 id=&#34;public-key-certificate-distribution&#34;&gt;Public key certificate distribution&lt;/h3&gt;

&lt;p&gt;There is a key service with endpoint to retrieve public key certificate from microservices
during runtime.&lt;/p&gt;

&lt;h3 id=&#34;oauth2-server-portal-and-light-java-to-form-ecosystem&#34;&gt;OAuth2 server, portal and light Java to form ecosystem&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/networknt/light-java&#34;&gt;light-java&lt;/a&gt; to build API&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/networknt/light-oauth2&#34;&gt;light-oauth2&lt;/a&gt; to control API access&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/networknt/light-portal&#34;&gt;light-portal&lt;/a&gt; to manage clients and APIs&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>