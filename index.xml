<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Light OAuth2 - OAuth2 Serivces based on light-4j</title>
    <link>https://networknt.github.io/light-oauth2/</link>
    <description>Recent content on Light OAuth2 - OAuth2 Serivces based on light-4j</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Sun, 12 Feb 2017 19:36:42 -0500</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/light-oauth2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>References</title>
      <link>https://networknt.github.io/light-oauth2/reference/</link>
      <pubDate>Sun, 12 Feb 2017 19:36:42 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/reference/</guid>
      <description>Specifications  OpenID Connect Core 1.0 incorporating errata set 1 - OpenID Connect core OAuth 2.0 Multiple Response Type Encoding Practices - OpenID Connect multiple response types OAuth 2.0 Form Post Response Mode - Form post response mode OAuth 2.0 Threat Model and Security Considerations - Information on all sorts of threats in OAuth 2.0 specification.  Articles and Blogs  OAuth 2 and Fragment encoding - Some browsers changed behavior for fragment encoding and the impact on OAuth 2.</description>
    </item>
    
    <item>
      <title>How to generate long lived token</title>
      <link>https://networknt.github.io/light-oauth2/tutorials/longlive/</link>
      <pubDate>Sun, 08 Jan 2017 16:15:49 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tutorials/longlive/</guid>
      <description>In normal case, your clients or testing tools should integrate with OAuth authorization server to get tokens during runtime; however, for manual testing, it is very inconvenient to get access token every 10 minutes. To make tester&amp;rsquo;s jobs easier, you can generate a long lived token for dev testing from a tool in Light-Java framework.
The light-oauth2 contains two testing key pairs for testing only. Both private keys and public key certificates can be found in resources/config/oauth folder.</description>
    </item>
    
    <item>
      <title>keytool</title>
      <link>https://networknt.github.io/light-oauth2/tools/keytool/</link>
      <pubDate>Sun, 08 Jan 2017 15:50:36 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tools/keytool/</guid>
      <description>In production environment, it is recommended to buy certificates to sign the JWT token; however, most people will use self-signed certificate on non-production environment. Java Keytool is a very convenient tool to generate key pair and public key certificate.
Here is an example to generate key pair and public key certificate in two steps.
keytool -genkey -keyalg RSA -alias selfsigned -keystore primary.jks -storepass password -validity 3600 -keysize 2048 keytool -export -alias selfsigned -keystore primary.</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>https://networknt.github.io/light-oauth2/tutorials/</link>
      <pubDate>Sun, 01 Jan 2017 15:14:28 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tutorials/</guid>
      <description>There are two editions of OAuth2 servers available and each edition has different set of services and endpoints. For Enterprise edition, there are seven services with numeric endpoints. Provider edition is still in planning phase but it will have more features than Enterprise edition.
The following links documented services and endpoints served by each service for two editions and some other useful guides.
How to use enterprise edition
How to user provider edition</description>
    </item>
    
    <item>
      <title>provider</title>
      <link>https://networknt.github.io/light-oauth2/tutorials/provider/</link>
      <pubDate>Sun, 01 Jan 2017 15:14:20 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tutorials/provider/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Enterprise Edition Tutorial</title>
      <link>https://networknt.github.io/light-oauth2/tutorials/enterprise/</link>
      <pubDate>Sun, 01 Jan 2017 15:14:13 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tutorials/enterprise/</guid>
      <description>Note: the following steps use Oracle database as an example. MySQL and Postgres should be the same by choosing docker-compose-mysql.yml or docker-compose-postgres.yml when starting docker-compose.
Start Services In production mode, all services will have docker images downloaded from hub.docker.com or private docker hub within your organization. And Kubernetes or other docker orchestration tools will be used to manage containers.
To help use to understand how each service work and enable user to modify services, the first section of this tutorial will focus on development mode which will build these services and dockerize them.</description>
    </item>
    
    <item>
      <title>OAuth2 Introduction</title>
      <link>https://networknt.github.io/light-oauth2/getting-started/introduction/</link>
      <pubDate>Sun, 01 Jan 2017 10:12:55 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/getting-started/introduction/</guid>
      <description>OAuth 2 is an authorization framework that enables applications to obtain limited access to user&amp;rsquo;s resources on an HTTP service - normally exposed as a REST API. It works by delegating user authentication to an authorization service which contains all sorts of login service providers like LDAP for employees and database for customers.
OAuth 2 provides authorization flows for the following types of application to application communication:
 Web server to API Standalone application to API API to API  This informational guide is geared towards application developers, and provides an overview of OAuth 2 roles, authorization grant types, use cases, and flows.</description>
    </item>
    
    <item>
      <title>Services</title>
      <link>https://networknt.github.io/light-oauth2/services/</link>
      <pubDate>Sun, 01 Jan 2017 09:37:52 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/</guid>
      <description>There are two editions of OAuth2 servers available and each edition has different set of services and endpoints. For Enterprise edition, there are 7 services with numeric endpoints. Provider edition is still in planning phase but it will have more features than Enterprise edition.
The following links documented services and endpoints served by each service for two editions.
Enterprise edition
Provider edition</description>
    </item>
    
    <item>
      <title>Provider Edition</title>
      <link>https://networknt.github.io/light-oauth2/services/provider/</link>
      <pubDate>Sun, 01 Jan 2017 09:37:43 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/provider/</guid>
      <description>To be implemented.</description>
    </item>
    
    <item>
      <title>Enterprise Edition</title>
      <link>https://networknt.github.io/light-oauth2/services/enterprise/</link>
      <pubDate>Sun, 01 Jan 2017 09:37:32 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/services/enterprise/</guid>
      <description>There are six standard services that cover standard OAuth2 grant flows and extended features like service on-boarding, client on-boarding, user management and public key certificate distribution.
This document only describe the features and processes of each service. Please refer to tutorial on how to access these services.
Code This is a service that support authorization code grant type. The authorization code grant type is used to obtain both access tokens and refresh tokens and is optimized for confidential clients.</description>
    </item>
    
    <item>
      <title>Tools</title>
      <link>https://networknt.github.io/light-oauth2/tools/</link>
      <pubDate>Sun, 01 Jan 2017 09:36:54 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tools/</guid>
      <description>The following tools can be used to test microservices and generate key pairs.
curl
postman
keytool</description>
    </item>
    
    <item>
      <title>postman</title>
      <link>https://networknt.github.io/light-oauth2/tools/postman/</link>
      <pubDate>Sun, 01 Jan 2017 09:35:43 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tools/postman/</guid>
      <description></description>
    </item>
    
    <item>
      <title>curl</title>
      <link>https://networknt.github.io/light-oauth2/tools/curl/</link>
      <pubDate>Sun, 01 Jan 2017 09:30:53 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/tools/curl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://networknt.github.io/light-oauth2/getting-started/</link>
      <pubDate>Sat, 31 Dec 2016 21:20:22 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/getting-started/</guid>
      <description>OAuth2 Introduction If you are new to OAuth2, please read this introduction document to get familiar with the concept.
Select the Right Edition Enterprise Edition A microservices and database based OAuth2 server that have 7 services and numeric endpoints to support user login, access token, user registration, service registration, client registration and public key certificate distribution. It can support millions users and thousands of clients and services with scopes. It should be easily handle thousands of concurrent users per instance and each microservice can be scaled individually.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://networknt.github.io/light-oauth2/architecture/</link>
      <pubDate>Sat, 31 Dec 2016 21:16:50 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/architecture/</guid>
      <description>Microservices It is built on top of Light-Java framework as 7 microservices and each serivce has several endpoints to support user login, access token retrieval, user registration, service registration, client registration and public key certificate distribution. It can support millions users and thousands of clients and services with scopes. It should be easily handle thousands of concurrent users per instance and each service can be scaled individually if necessary.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://networknt.github.io/light-oauth2/</link>
      <pubDate>Sat, 31 Dec 2016 20:29:38 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-oauth2/</guid>
      <description>Why this OAuth 2.0 Authorization Server Fast and small memory footprint to lower production cost. The Development Edition can support 60000 user login and get authorization code redirect and can generate 700 access tokens per second on my laptop.
It has 7 microservices connected with in-memory data grid and each service can be scaled individually.
More secure than other implementations OAuth 2.0 is just a specification and a lot of details are in the individual implementation.</description>
    </item>
    
  </channel>
</rss>